

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Jan  9 04:54:50 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1455
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     	;# 
    17  0001                     	;# 
    18  0002                     	;# 
    19  0003                     	;# 
    20  0004                     	;# 
    21  0005                     	;# 
    22  0006                     	;# 
    23  0007                     	;# 
    24  0008                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000E                     	;# 
    30  0011                     	;# 
    31  0012                     	;# 
    32  0015                     	;# 
    33  0016                     	;# 
    34  0016                     	;# 
    35  0017                     	;# 
    36  0018                     	;# 
    37  0019                     	;# 
    38  001A                     	;# 
    39  001B                     	;# 
    40  001C                     	;# 
    41  008C                     	;# 
    42  008E                     	;# 
    43  0091                     	;# 
    44  0092                     	;# 
    45  0095                     	;# 
    46  0096                     	;# 
    47  0097                     	;# 
    48  0098                     	;# 
    49  0099                     	;# 
    50  009A                     	;# 
    51  009B                     	;# 
    52  009B                     	;# 
    53  009C                     	;# 
    54  009D                     	;# 
    55  009E                     	;# 
    56  009F                     	;# 
    57  010C                     	;# 
    58  010E                     	;# 
    59  0111                     	;# 
    60  0112                     	;# 
    61  0113                     	;# 
    62  0114                     	;# 
    63  0115                     	;# 
    64  0116                     	;# 
    65  0117                     	;# 
    66  0118                     	;# 
    67  0119                     	;# 
    68  011D                     	;# 
    69  018C                     	;# 
    70  018E                     	;# 
    71  0191                     	;# 
    72  0191                     	;# 
    73  0192                     	;# 
    74  0193                     	;# 
    75  0193                     	;# 
    76  0194                     	;# 
    77  0195                     	;# 
    78  0196                     	;# 
    79  0197                     	;# 
    80  0199                     	;# 
    81  019A                     	;# 
    82  019B                     	;# 
    83  019B                     	;# 
    84  019C                     	;# 
    85  019D                     	;# 
    86  019E                     	;# 
    87  019F                     	;# 
    88  020C                     	;# 
    89  0211                     	;# 
    90  0211                     	;# 
    91  0212                     	;# 
    92  0212                     	;# 
    93  0213                     	;# 
    94  0213                     	;# 
    95  0214                     	;# 
    96  0214                     	;# 
    97  0215                     	;# 
    98  0215                     	;# 
    99  0215                     	;# 
   100  0216                     	;# 
   101  0216                     	;# 
   102  0217                     	;# 
   103  0217                     	;# 
   104  0391                     	;# 
   105  0392                     	;# 
   106  0393                     	;# 
   107  039A                     	;# 
   108  039B                     	;# 
   109  0611                     	;# 
   110  0612                     	;# 
   111  0613                     	;# 
   112  0613                     	;# 
   113  0614                     	;# 
   114  0615                     	;# 
   115  0616                     	;# 
   116  0616                     	;# 
   117  0691                     	;# 
   118  0692                     	;# 
   119  0693                     	;# 
   120  0694                     	;# 
   121  0695                     	;# 
   122  0E8E                     	;# 
   123  0E8F                     	;# 
   124  0E90                     	;# 
   125  0E91                     	;# 
   126  0E92                     	;# 
   127  0E93                     	;# 
   128  0E94                     	;# 
   129  0E94                     	;# 
   130  0E95                     	;# 
   131  0E96                     	;# 
   132  0E97                     	;# 
   133  0E98                     	;# 
   134  0E99                     	;# 
   135  0E9A                     	;# 
   136  0E9B                     	;# 
   137  0E9C                     	;# 
   138  0E9D                     	;# 
   139  0E9E                     	;# 
   140  0E9F                     	;# 
   141  0FE4                     	;# 
   142  0FE5                     	;# 
   143  0FE6                     	;# 
   144  0FE7                     	;# 
   145  0FE8                     	;# 
   146  0FE9                     	;# 
   147  0FEA                     	;# 
   148  0FEB                     	;# 
   149  0FED                     	;# 
   150  0FEE                     	;# 
   151  0FEF                     	;# 
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000E                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  008C                     	;# 
   178  008E                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010E                     	;# 
   195  0111                     	;# 
   196  0112                     	;# 
   197  0113                     	;# 
   198  0114                     	;# 
   199  0115                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  0118                     	;# 
   203  0119                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  020C                     	;# 
   225  0211                     	;# 
   226  0211                     	;# 
   227  0212                     	;# 
   228  0212                     	;# 
   229  0213                     	;# 
   230  0213                     	;# 
   231  0214                     	;# 
   232  0214                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0391                     	;# 
   241  0392                     	;# 
   242  0393                     	;# 
   243  039A                     	;# 
   244  039B                     	;# 
   245  0611                     	;# 
   246  0612                     	;# 
   247  0613                     	;# 
   248  0613                     	;# 
   249  0614                     	;# 
   250  0615                     	;# 
   251  0616                     	;# 
   252  0616                     	;# 
   253  0691                     	;# 
   254  0692                     	;# 
   255  0693                     	;# 
   256  0694                     	;# 
   257  0695                     	;# 
   258  0E8E                     	;# 
   259  0E8F                     	;# 
   260  0E90                     	;# 
   261  0E91                     	;# 
   262  0E92                     	;# 
   263  0E93                     	;# 
   264  0E94                     	;# 
   265  0E94                     	;# 
   266  0E95                     	;# 
   267  0E96                     	;# 
   268  0E97                     	;# 
   269  0E98                     	;# 
   270  0E99                     	;# 
   271  0E9A                     	;# 
   272  0E9B                     	;# 
   273  0E9C                     	;# 
   274  0E9D                     	;# 
   275  0E9E                     	;# 
   276  0E9F                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288                           
   289                           	psect	idataBANK0
   290  027A                     __pidataBANK0:	
   291                           
   292                           ;initializer for _leftDir
   293  027A  3401               	retlw	1
   294                           
   295                           ;initializer for _rightDir
   296  027B  3401               	retlw	1
   297  001B                     _PR2	set	27
   298  001C                     _T2CONbits	set	28
   299  005F                     _GIE	set	95
   300  005E                     _PEIE	set	94
   301  008D                     _RCIF	set	141
   302  0089                     _TMR2IF	set	137
   303  008C                     _TXIF	set	140
   304  0099                     _OSCCONbits	set	153
   305  008C                     _TRISAbits	set	140
   306  008E                     _TRISCbits	set	142
   307  048D                     _RCIE	set	1165
   308  0489                     _TMR2IE	set	1161
   309  0474                     _TRISC4	set	1140
   310  0475                     _TRISC5	set	1141
   311  010C                     _LATA	set	268
   312  010C                     _LATAbits	set	268
   313  010E                     _LATC	set	270
   314  010E                     _LATCbits	set	270
   315  019B                     _SPBRG	set	411
   316  018C                     _ANSELA	set	396
   317  018E                     _ANSELC	set	398
   318  0199                     _RCREG	set	409
   319  019D                     _RCSTA	set	413
   320  019A                     _TXREG	set	410
   321  019E                     _TXSTA	set	414
   322                           
   323                           ; #config settings
   324  0000                     
   325                           	psect	cinit
   326  0091                     start_initialization:	
   327  0091                     __initialization:	
   328                           
   329                           ; Clear objects allocated to COMMON
   330  0091  01F0               	clrf	__pbssCOMMON& (0+127)
   331  0092  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   332  0093  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   333  0094  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   334  0095  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   335                           
   336                           ; Clear objects allocated to BANK0
   337  0096  01B0               	clrf	__pbssBANK0& (0+127)
   338  0097  01B1               	clrf	(__pbssBANK0+1)& (0+127)
   339  0098  01B2               	clrf	(__pbssBANK0+2)& (0+127)
   340  0099  01B3               	clrf	(__pbssBANK0+3)& (0+127)
   341  009A  01B4               	clrf	(__pbssBANK0+4)& (0+127)
   342  009B  01B5               	clrf	(__pbssBANK0+5)& (0+127)
   343  009C  01B6               	clrf	(__pbssBANK0+6)& (0+127)
   344                           
   345                           ; Initialize objects allocated to BANK0
   346  009D  3182  227A  3180   	fcall	__pidataBANK0	;fetch initializer
   347  00A0  00B7               	movwf	__pdataBANK0& (0+127)
   348  00A1  3182  227B         	fcall	__pidataBANK0+1	;fetch initializer
   349  00A3  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   350  00A4                     end_of_initialization:	
   351                           ;End of C runtime variable initialization code
   352                           
   353  00A4                     __end_of__initialization:	
   354  00A4  0020               	movlb	0
   355  00A5  3180  28A7         	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssCOMMON
   358  0070                     __pbssCOMMON:	
   359  0070                     _i:	
   360  0070                     	ds	1
   361  0071                     _leftPWM:	
   362  0071                     	ds	1
   363  0072                     _packetCorrupt:	
   364  0072                     	ds	1
   365  0073                     _rightPWM:	
   366  0073                     	ds	1
   367  0074                     _rxchar:	
   368  0074                     	ds	1
   369                           
   370                           	psect	bssBANK0
   371  0030                     __pbssBANK0:	
   372  0030                     _packetBuffer:	
   373  0030                     	ds	6
   374  0036                     _packetReceived:	
   375  0036                     	ds	1
   376                           
   377                           	psect	dataBANK0
   378  0037                     __pdataBANK0:	
   379  0037                     _leftDir:	
   380  0037                     	ds	1
   381  0038                     _rightDir:	
   382  0038                     	ds	1
   383                           
   384                           	psect	cstackCOMMON
   385  0075                     __pcstackCOMMON:	
   386  0075                     ??_getch:	
   387  0075                     ?_ISR:	
   388                           ; 0 bytes @ 0x0
   389                           
   390  0075                     ??_ISR:	
   391                           ; 0 bytes @ 0x0
   392                           
   393  0075                     ?_setup:	
   394                           ; 0 bytes @ 0x0
   395                           
   396  0075                     ?_main:	
   397                           ; 0 bytes @ 0x0
   398                           
   399  0075                     ?_getch:	
   400                           ; 0 bytes @ 0x0
   401                           
   402                           
   403                           ; 1 bytes @ 0x0
   404  0075                     	ds	3
   405  0078                     _ISR$162:	
   406                           
   407                           ; 2 bytes @ 0x3
   408  0078                     	ds	2
   409                           
   410                           	psect	cstackBANK0
   411  0020                     __pcstackBANK0:	
   412  0020                     ??_setup:	
   413  0020                     ??_main:	
   414                           ; 0 bytes @ 0x0
   415                           
   416                           
   417                           ; 0 bytes @ 0x0
   418  0020                     	ds	4
   419  0024                     main@leftPWMtemp:	
   420                           
   421                           ; 2 bytes @ 0x4
   422  0024                     	ds	2
   423  0026                     main@rightPWMtemp:	
   424                           
   425                           ; 2 bytes @ 0x6
   426  0026                     	ds	2
   427  0028                     main@xAbs:	
   428                           
   429                           ; 2 bytes @ 0x8
   430  0028                     	ds	2
   431  002A                     main@yAbs:	
   432                           
   433                           ; 2 bytes @ 0xA
   434  002A                     	ds	2
   435  002C                     main@x:	
   436                           
   437                           ; 2 bytes @ 0xC
   438  002C                     	ds	2
   439  002E                     main@y:	
   440                           
   441                           ; 2 bytes @ 0xE
   442  002E                     	ds	2
   443                           
   444                           	psect	maintext
   445  00A7                     __pmaintext:	
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 173 in file "main.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;		None
   454 ;; Auto vars:     Size  Location     Type
   455 ;;  y               2   14[BANK0 ] int 
   456 ;;  x               2   12[BANK0 ] int 
   457 ;;  yAbs            2   10[BANK0 ] int 
   458 ;;  xAbs            2    8[BANK0 ] int 
   459 ;;  rightPWMtemp    2    6[BANK0 ] int 
   460 ;;  leftPWMtemp     2    4[BANK0 ] int 
   461 ;; Return value:  Size  Location     Type
   462 ;;		None               void
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : 17F/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   471 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
   472 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   473 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
   474 ;;Total ram usage:       16 bytes
   475 ;; Hardware stack levels required when called:    3
   476 ;; This function calls:
   477 ;;		_setup
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function _main
   485  00A7                     _main:	
   486                           
   487                           ;main.c: 174: int x = 0;
   488                           
   489                           ;incstack = 0
   490                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   491  00A7  0020               	movlb	0	; select bank0
   492  00A8  01AC               	clrf	main@x
   493  00A9  01AD               	clrf	main@x+1
   494                           
   495                           ;main.c: 175: int y = 0;
   496  00AA  01AE               	clrf	main@y
   497  00AB  01AF               	clrf	main@y+1
   498                           
   499                           ;main.c: 176: int leftPWMtemp = 0;
   500  00AC  01A4               	clrf	main@leftPWMtemp
   501  00AD  01A5               	clrf	main@leftPWMtemp+1
   502                           
   503                           ;main.c: 177: int rightPWMtemp = 0;
   504  00AE  01A6               	clrf	main@rightPWMtemp
   505  00AF  01A7               	clrf	main@rightPWMtemp+1
   506                           
   507                           ;main.c: 178: int xAbs = 0;
   508  00B0  01A8               	clrf	main@xAbs
   509  00B1  01A9               	clrf	main@xAbs+1
   510                           
   511                           ;main.c: 179: int yAbs = 0;
   512  00B2  01AA               	clrf	main@yAbs
   513  00B3  01AB               	clrf	main@yAbs+1
   514                           
   515                           ;main.c: 181: setup();
   516  00B4  3182  224D  3180   	fcall	_setup
   517  00B7                     l1091:	
   518                           ;main.c: 182: while (1)
   519                           
   520                           
   521                           ;main.c: 183: {
   522                           ;main.c: 184: if (packetReceived)
   523  00B7  0020               	movlb	0	; select bank0
   524  00B8  0836               	movf	_packetReceived,w
   525  00B9  1903               	btfsc	3,2
   526  00BA  28B7               	goto	l1091
   527                           
   528                           ;main.c: 185: {
   529                           ;main.c: 186: if (packetBuffer[0] == 0x02 && packetBuffer[5] == 0x03)
   530  00BB  0830               	movf	_packetBuffer,w
   531  00BC  3A02               	xorlw	2
   532  00BD  1D03               	skipz
   533  00BE  2A48               	goto	l103
   534  00BF  0835               	movf	_packetBuffer+5,w
   535  00C0  3A03               	xorlw	3
   536  00C1  1D03               	skipz
   537  00C2  2A48               	goto	l103
   538                           
   539                           ;main.c: 187: {
   540                           ;main.c: 188: if (packetBuffer[1] == 0)
   541  00C3  08B1               	movf	_packetBuffer+1,f
   542  00C4  1D03               	skipz
   543  00C5  28DF               	goto	l1101
   544                           
   545                           ;main.c: 189: {
   546                           ;main.c: 190: x = 0 - 72 - (128 - packetBuffer[2]);
   547  00C6  0832               	movf	_packetBuffer+2,w
   548  00C7  00A0               	movwf	??_main
   549  00C8  01A1               	clrf	??_main+1
   550  00C9  09A0               	comf	??_main,f
   551  00CA  09A1               	comf	??_main+1,f
   552  00CB  0AA0               	incf	??_main,f
   553  00CC  1903               	skipnz
   554  00CD  0AA1               	incf	??_main+1,f
   555  00CE  0820               	movf	??_main,w
   556  00CF  3E80               	addlw	128
   557  00D0  00A2               	movwf	??_main+2
   558  00D1  3000               	movlw	0
   559  00D2  3D21               	addwfc	??_main+1,w
   560  00D3  00A3               	movwf	??_main+3
   561  00D4  09A2               	comf	??_main+2,f
   562  00D5  09A3               	comf	??_main+3,f
   563  00D6  0AA2               	incf	??_main+2,f
   564  00D7  1903               	skipnz
   565  00D8  0AA3               	incf	??_main+3,f
   566  00D9  0822               	movf	??_main+2,w
   567  00DA  3EB8               	addlw	184
   568  00DB  00AC               	movwf	main@x
   569  00DC  30FF               	movlw	255
   570  00DD  3D23               	addwfc	??_main+3,w
   571  00DE  28F4               	goto	L2
   572  00DF                     l1101:	
   573                           ;main.c: 191: }
   574                           
   575                           
   576                           ;main.c: 192: else if (packetBuffer[1] == 1)
   577  00DF  0831               	movf	_packetBuffer+1,w
   578  00E0  3A01               	xorlw	1
   579  00E1  1D03               	skipz
   580  00E2  28EA               	goto	l1105
   581                           
   582                           ;main.c: 193: {
   583                           ;main.c: 194: x = 0 - 72 + (packetBuffer[2]);
   584  00E3  0832               	movf	_packetBuffer+2,w
   585  00E4  3EB8               	addlw	184
   586  00E5  00AC               	movwf	main@x
   587  00E6  30FF               	movlw	255
   588  00E7  1803               	skipnc
   589  00E8  3000               	movlw	0
   590  00E9  28F4               	goto	L2
   591  00EA                     l1105:	
   592                           ;main.c: 195: }
   593                           
   594                           
   595                           ;main.c: 196: else if (packetBuffer[1] == 2)
   596  00EA  0831               	movf	_packetBuffer+1,w
   597  00EB  3A02               	xorlw	2
   598  00EC  1D03               	skipz
   599  00ED  28F6               	goto	l108
   600                           
   601                           ;main.c: 197: {
   602                           ;main.c: 198: x = 56 + packetBuffer[2];
   603  00EE  0832               	movf	_packetBuffer+2,w
   604  00EF  3E38               	addlw	56
   605  00F0  00AC               	movwf	main@x
   606  00F1  3000               	movlw	0
   607  00F2  1803               	skipnc
   608  00F3  3001               	movlw	1
   609  00F4                     L2:	
   610  00F4  00AD               	movwf	main@x+1
   611                           
   612                           ;main.c: 199: }
   613  00F5  28F8               	goto	l1109
   614  00F6                     l108:	
   615                           
   616                           ;main.c: 200: else
   617                           ;main.c: 201: {
   618                           ;main.c: 202: packetCorrupt = 1;
   619  00F6  01F2               	clrf	_packetCorrupt
   620  00F7  0AF2               	incf	_packetCorrupt,f
   621  00F8                     l1109:	
   622                           
   623                           ;main.c: 203: }
   624                           ;main.c: 205: if (packetBuffer[3] == 0)
   625  00F8  08B3               	movf	_packetBuffer+3,f
   626  00F9  1D03               	skipz
   627  00FA  2914               	goto	l1113
   628                           
   629                           ;main.c: 206: {
   630                           ;main.c: 207: y = 0 - 72 - (128 - packetBuffer[4]);
   631  00FB  0834               	movf	_packetBuffer+4,w
   632  00FC  00A0               	movwf	??_main
   633  00FD  01A1               	clrf	??_main+1
   634  00FE  09A0               	comf	??_main,f
   635  00FF  09A1               	comf	??_main+1,f
   636  0100  0AA0               	incf	??_main,f
   637  0101  1903               	skipnz
   638  0102  0AA1               	incf	??_main+1,f
   639  0103  0820               	movf	??_main,w
   640  0104  3E80               	addlw	128
   641  0105  00A2               	movwf	??_main+2
   642  0106  3000               	movlw	0
   643  0107  3D21               	addwfc	??_main+1,w
   644  0108  00A3               	movwf	??_main+3
   645  0109  09A2               	comf	??_main+2,f
   646  010A  09A3               	comf	??_main+3,f
   647  010B  0AA2               	incf	??_main+2,f
   648  010C  1903               	skipnz
   649  010D  0AA3               	incf	??_main+3,f
   650  010E  0822               	movf	??_main+2,w
   651  010F  3EB8               	addlw	184
   652  0110  00AE               	movwf	main@y
   653  0111  30FF               	movlw	255
   654  0112  3D23               	addwfc	??_main+3,w
   655  0113  2929               	goto	L4
   656  0114                     l1113:	
   657                           ;main.c: 208: }
   658                           
   659                           
   660                           ;main.c: 209: else if (packetBuffer[3] == 1)
   661  0114  0833               	movf	_packetBuffer+3,w
   662  0115  3A01               	xorlw	1
   663  0116  1D03               	skipz
   664  0117  291F               	goto	l1117
   665                           
   666                           ;main.c: 210: {
   667                           ;main.c: 211: y = 0 - 72 + (packetBuffer[4]);
   668  0118  0834               	movf	_packetBuffer+4,w
   669  0119  3EB8               	addlw	184
   670  011A  00AE               	movwf	main@y
   671  011B  30FF               	movlw	255
   672  011C  1803               	skipnc
   673  011D  3000               	movlw	0
   674  011E  2929               	goto	L4
   675  011F                     l1117:	
   676                           ;main.c: 212: }
   677                           
   678                           
   679                           ;main.c: 213: else if (packetBuffer[3] == 2)
   680  011F  0833               	movf	_packetBuffer+3,w
   681  0120  3A02               	xorlw	2
   682  0121  1D03               	skipz
   683  0122  292B               	goto	l114
   684                           
   685                           ;main.c: 214: {
   686                           ;main.c: 215: y = 56 + packetBuffer[4];
   687  0123  0834               	movf	_packetBuffer+4,w
   688  0124  3E38               	addlw	56
   689  0125  00AE               	movwf	main@y
   690  0126  3000               	movlw	0
   691  0127  1803               	skipnc
   692  0128  3001               	movlw	1
   693  0129                     L4:	
   694  0129  00AF               	movwf	main@y+1
   695                           
   696                           ;main.c: 216: }
   697  012A  292D               	goto	l1121
   698  012B                     l114:	
   699                           
   700                           ;main.c: 217: else
   701                           ;main.c: 218: {
   702                           ;main.c: 219: packetCorrupt = 1;
   703  012B  01F2               	clrf	_packetCorrupt
   704  012C  0AF2               	incf	_packetCorrupt,f
   705  012D                     l1121:	
   706                           
   707                           ;main.c: 220: }
   708                           ;main.c: 222: xAbs = x > 0 ? x : -x;
   709  012D  082D               	movf	main@x+1,w
   710  012E  3A80               	xorlw	128
   711  012F  00FF               	movwf	127
   712  0130  3080               	movlw	128
   713  0131  027F               	subwf	127,w
   714  0132  1D03               	skipz
   715  0133  2936               	goto	u975
   716  0134  3001               	movlw	1
   717  0135  022C               	subwf	main@x,w
   718  0136                     u975:	
   719  0136  1803               	skipnc
   720  0137  2945               	goto	l1125
   721  0138  0020               	movlb	0	; select bank0
   722  0139  092C               	comf	main@x,w
   723  013A  00A0               	movwf	??_main
   724  013B  092D               	comf	main@x+1,w
   725  013C  00A1               	movwf	??_main+1
   726  013D  0AA0               	incf	??_main,f
   727  013E  1903               	skipnz
   728  013F  0AA1               	incf	??_main+1,f
   729  0140  0820               	movf	??_main,w
   730  0141  00A8               	movwf	main@xAbs
   731  0142  0821               	movf	??_main+1,w
   732  0143  00A9               	movwf	main@xAbs+1
   733  0144  294C               	goto	l1127
   734  0145                     l1125:	
   735  0145  0020               	movlb	0	; select bank0
   736  0146  082D               	movf	main@x+1,w
   737  0147  01A9               	clrf	main@xAbs+1
   738  0148  07A9               	addwf	main@xAbs+1,f
   739  0149  082C               	movf	main@x,w
   740  014A  01A8               	clrf	main@xAbs
   741  014B  07A8               	addwf	main@xAbs,f
   742  014C                     l1127:	
   743                           
   744                           ;main.c: 223: yAbs = y > 0 ? y : -y;
   745  014C  082F               	movf	main@y+1,w
   746  014D  3A80               	xorlw	128
   747  014E  00FF               	movwf	127
   748  014F  3080               	movlw	128
   749  0150  027F               	subwf	127,w
   750  0151  1D03               	skipz
   751  0152  2955               	goto	u985
   752  0153  3001               	movlw	1
   753  0154  022E               	subwf	main@y,w
   754  0155                     u985:	
   755  0155  1803               	skipnc
   756  0156  2964               	goto	l1131
   757  0157  0020               	movlb	0	; select bank0
   758  0158  092E               	comf	main@y,w
   759  0159  00A0               	movwf	??_main
   760  015A  092F               	comf	main@y+1,w
   761  015B  00A1               	movwf	??_main+1
   762  015C  0AA0               	incf	??_main,f
   763  015D  1903               	skipnz
   764  015E  0AA1               	incf	??_main+1,f
   765  015F  0820               	movf	??_main,w
   766  0160  00AA               	movwf	main@yAbs
   767  0161  0821               	movf	??_main+1,w
   768  0162  00AB               	movwf	main@yAbs+1
   769  0163  296B               	goto	l123
   770  0164                     l1131:	
   771  0164  0020               	movlb	0	; select bank0
   772  0165  082F               	movf	main@y+1,w
   773  0166  01AB               	clrf	main@yAbs+1
   774  0167  07AB               	addwf	main@yAbs+1,f
   775  0168  082E               	movf	main@y,w
   776  0169  01AA               	clrf	main@yAbs
   777  016A  07AA               	addwf	main@yAbs,f
   778  016B                     l123:	
   779                           
   780                           ;main.c: 225: if (x < (-y))
   781  016B  092E               	comf	main@y,w
   782  016C  00A0               	movwf	??_main
   783  016D  092F               	comf	main@y+1,w
   784  016E  00A1               	movwf	??_main+1
   785  016F  0AA0               	incf	??_main,f
   786  0170  1903               	skipnz
   787  0171  0AA1               	incf	??_main+1,f
   788  0172  082D               	movf	main@x+1,w
   789  0173  3A80               	xorlw	128
   790  0174  00A2               	movwf	??_main+2
   791  0175  0821               	movf	??_main+1,w
   792  0176  3A80               	xorlw	128
   793  0177  0222               	subwf	??_main+2,w
   794  0178  1D03               	skipz
   795  0179  297C               	goto	u995
   796  017A  0820               	movf	??_main,w
   797  017B  022C               	subwf	main@x,w
   798  017C                     u995:	
   799  017C  1803               	skipnc
   800  017D  2992               	goto	l124
   801                           
   802                           ;main.c: 226: {
   803                           ;main.c: 227: leftDir = 0;
   804  017E  0020               	movlb	0	; select bank0
   805  017F  01B7               	clrf	_leftDir
   806                           
   807                           ;main.c: 228: if (x < 0)
   808  0180  1FAD               	btfss	main@x+1,7
   809  0181  298E               	goto	l1139
   810                           
   811                           ;main.c: 229: {
   812                           ;main.c: 230: leftPWMtemp = xAbs - y;
   813  0182  092E               	comf	main@y,w
   814  0183  00A0               	movwf	??_main
   815  0184  092F               	comf	main@y+1,w
   816  0185  00A1               	movwf	??_main+1
   817  0186  0AA0               	incf	??_main,f
   818  0187  1903               	skipnz
   819  0188  0AA1               	incf	??_main+1,f
   820  0189  0828               	movf	main@xAbs,w
   821  018A  0720               	addwf	??_main,w
   822  018B  00A4               	movwf	main@leftPWMtemp
   823  018C  0829               	movf	main@xAbs+1,w
   824  018D  29A2               	goto	L6
   825  018E                     l1139:	
   826                           ;main.c: 231: }
   827                           
   828                           
   829                           ;main.c: 232: else
   830                           ;main.c: 233: {
   831                           ;main.c: 234: leftPWMtemp = yAbs - x;
   832  018E  092C               	comf	main@x,w
   833  018F  00A0               	movwf	??_main
   834  0190  092D               	comf	main@x+1,w
   835  0191  299A               	goto	L11
   836  0192                     l124:	
   837                           ;main.c: 235: }
   838                           ;main.c: 236: }
   839                           
   840                           
   841                           ;main.c: 237: else
   842                           ;main.c: 238: {
   843                           ;main.c: 239: leftDir = 1;
   844  0192  0020               	movlb	0	; select bank0
   845  0193  01B7               	clrf	_leftDir
   846  0194  0AB7               	incf	_leftDir,f
   847                           
   848                           ;main.c: 240: if (x < 0)
   849  0195  1FAD               	btfss	main@x+1,7
   850  0196  29A4               	goto	l1143
   851                           
   852                           ;main.c: 241: {
   853                           ;main.c: 242: leftPWMtemp = yAbs - xAbs;
   854  0197  0928               	comf	main@xAbs,w
   855  0198  00A0               	movwf	??_main
   856  0199  0929               	comf	main@xAbs+1,w
   857  019A                     L11:	
   858  019A  00A1               	movwf	??_main+1
   859  019B  0AA0               	incf	??_main,f
   860  019C  1903               	skipnz
   861  019D  0AA1               	incf	??_main+1,f
   862  019E  082A               	movf	main@yAbs,w
   863  019F  0720               	addwf	??_main,w
   864  01A0  00A4               	movwf	main@leftPWMtemp
   865  01A1  082B               	movf	main@yAbs+1,w
   866  01A2                     L6:	
   867  01A2  3D21               	addwfc	??_main+1,w
   868  01A3  29A9               	goto	L7
   869  01A4                     l1143:	
   870                           ;main.c: 243: }
   871                           
   872                           
   873                           ;main.c: 244: else
   874                           ;main.c: 245: {
   875                           ;main.c: 246: leftPWMtemp = x + y;
   876  01A4  082E               	movf	main@y,w
   877  01A5  072C               	addwf	main@x,w
   878  01A6  00A4               	movwf	main@leftPWMtemp
   879  01A7  082F               	movf	main@y+1,w
   880  01A8  3D2D               	addwfc	main@x+1,w
   881  01A9                     L7:	
   882  01A9  00A5               	movwf	main@leftPWMtemp+1
   883                           
   884                           ;main.c: 247: }
   885                           ;main.c: 248: }
   886                           ;main.c: 250: if (y > x)
   887  01AA  082D               	movf	main@x+1,w
   888  01AB  3A80               	xorlw	128
   889  01AC  00A0               	movwf	??_main
   890  01AD  082F               	movf	main@y+1,w
   891  01AE  3A80               	xorlw	128
   892  01AF  0220               	subwf	??_main,w
   893  01B0  1D03               	skipz
   894  01B1  29B4               	goto	u1025
   895  01B2  082E               	movf	main@y,w
   896  01B3  022C               	subwf	main@x,w
   897  01B4                     u1025:	
   898  01B4  1803               	skipnc
   899  01B5  29D6               	goto	l1155
   900                           
   901                           ;main.c: 251: {
   902                           ;main.c: 252: rightDir = 1;
   903  01B6  0020               	movlb	0	; select bank0
   904  01B7  01B8               	clrf	_rightDir
   905  01B8  0AB8               	incf	_rightDir,f
   906                           
   907                           ;main.c: 253: if (y > 0)
   908  01B9  082F               	movf	main@y+1,w
   909  01BA  3A80               	xorlw	128
   910  01BB  00FF               	movwf	127
   911  01BC  3080               	movlw	128
   912  01BD  027F               	subwf	127,w
   913  01BE  1D03               	skipz
   914  01BF  29C2               	goto	u1035
   915  01C0  3001               	movlw	1
   916  01C1  022E               	subwf	main@y,w
   917  01C2                     u1035:	
   918  01C2  1C03               	skipc
   919  01C3  29D1               	goto	l1153
   920                           
   921                           ;main.c: 254: {
   922                           ;main.c: 255: rightPWMtemp = y - x;
   923  01C4  0020               	movlb	0	; select bank0
   924  01C5  092C               	comf	main@x,w
   925  01C6  00A0               	movwf	??_main
   926  01C7  092D               	comf	main@x+1,w
   927  01C8  00A1               	movwf	??_main+1
   928  01C9  0AA0               	incf	??_main,f
   929  01CA  1903               	skipnz
   930  01CB  0AA1               	incf	??_main+1,f
   931  01CC  082E               	movf	main@y,w
   932  01CD  0720               	addwf	??_main,w
   933  01CE  00A6               	movwf	main@rightPWMtemp
   934  01CF  082F               	movf	main@y+1,w
   935  01D0  29EF               	goto	L9
   936  01D1                     l1153:	
   937                           ;main.c: 256: }
   938                           
   939                           
   940                           ;main.c: 257: else
   941                           ;main.c: 258: {
   942                           ;main.c: 259: rightPWMtemp = xAbs - yAbs;
   943  01D1  0020               	movlb	0	; select bank0
   944  01D2  092A               	comf	main@yAbs,w
   945  01D3  00A0               	movwf	??_main
   946  01D4  092B               	comf	main@yAbs+1,w
   947  01D5  29E7               	goto	L12
   948  01D6                     l1155:	
   949                           ;main.c: 260: }
   950                           ;main.c: 261: }
   951                           
   952                           
   953                           ;main.c: 262: else
   954                           ;main.c: 263: {
   955                           ;main.c: 264: rightDir = 0;
   956  01D6  0020               	movlb	0	; select bank0
   957  01D7  01B8               	clrf	_rightDir
   958                           
   959                           ;main.c: 265: if (y > 0)
   960  01D8  082F               	movf	main@y+1,w
   961  01D9  3A80               	xorlw	128
   962  01DA  00FF               	movwf	127
   963  01DB  3080               	movlw	128
   964  01DC  027F               	subwf	127,w
   965  01DD  1D03               	skipz
   966  01DE  29E1               	goto	u1045
   967  01DF  3001               	movlw	1
   968  01E0  022E               	subwf	main@y,w
   969  01E1                     u1045:	
   970  01E1  1C03               	skipc
   971  01E2  29F1               	goto	l1161
   972                           
   973                           ;main.c: 266: {
   974                           ;main.c: 267: rightPWMtemp = xAbs - y;
   975  01E3  0020               	movlb	0	; select bank0
   976  01E4  092E               	comf	main@y,w
   977  01E5  00A0               	movwf	??_main
   978  01E6  092F               	comf	main@y+1,w
   979  01E7                     L12:	
   980  01E7  00A1               	movwf	??_main+1
   981  01E8  0AA0               	incf	??_main,f
   982  01E9  1903               	skipnz
   983  01EA  0AA1               	incf	??_main+1,f
   984  01EB  0828               	movf	main@xAbs,w
   985  01EC  0720               	addwf	??_main,w
   986  01ED  00A6               	movwf	main@rightPWMtemp
   987  01EE  0829               	movf	main@xAbs+1,w
   988  01EF                     L9:	
   989  01EF  3D21               	addwfc	??_main+1,w
   990  01F0  29F7               	goto	L10
   991  01F1                     l1161:	
   992                           ;main.c: 268: }
   993                           
   994                           
   995                           ;main.c: 269: else
   996                           ;main.c: 270: {
   997                           ;main.c: 271: rightPWMtemp = yAbs + x;
   998  01F1  0020               	movlb	0	; select bank0
   999  01F2  082C               	movf	main@x,w
  1000  01F3  072A               	addwf	main@yAbs,w
  1001  01F4  00A6               	movwf	main@rightPWMtemp
  1002  01F5  082D               	movf	main@x+1,w
  1003  01F6  3D2B               	addwfc	main@yAbs+1,w
  1004  01F7                     L10:	
  1005  01F7  00A7               	movwf	main@rightPWMtemp+1
  1006                           
  1007                           ;main.c: 272: }
  1008                           ;main.c: 273: }
  1009                           ;main.c: 274: if (leftPWMtemp > 100)
  1010  01F8  0825               	movf	main@leftPWMtemp+1,w
  1011  01F9  3A80               	xorlw	128
  1012  01FA  00FF               	movwf	127
  1013  01FB  3080               	movlw	128
  1014  01FC  027F               	subwf	127,w
  1015  01FD  1D03               	skipz
  1016  01FE  2A01               	goto	u1055
  1017  01FF  3065               	movlw	101
  1018  0200  0224               	subwf	main@leftPWMtemp,w
  1019  0201                     u1055:	
  1020  0201  1C03               	skipc
  1021  0202  2A08               	goto	l1167
  1022                           
  1023                           ;main.c: 275: {
  1024                           ;main.c: 276: leftPWMtemp = 100;
  1025  0203  3064               	movlw	100
  1026  0204  0020               	movlb	0	; select bank0
  1027  0205  00A4               	movwf	main@leftPWMtemp
  1028  0206  3000               	movlw	0
  1029  0207  00A5               	movwf	main@leftPWMtemp+1
  1030  0208                     l1167:	
  1031                           
  1032                           ;main.c: 277: }
  1033                           ;main.c: 278: if (rightPWMtemp > 100)
  1034  0208  0020               	movlb	0	; select bank0
  1035  0209  0827               	movf	main@rightPWMtemp+1,w
  1036  020A  3A80               	xorlw	128
  1037  020B  00FF               	movwf	127
  1038  020C  3080               	movlw	128
  1039  020D  027F               	subwf	127,w
  1040  020E  1D03               	skipz
  1041  020F  2A12               	goto	u1065
  1042  0210  3065               	movlw	101
  1043  0211  0226               	subwf	main@rightPWMtemp,w
  1044  0212                     u1065:	
  1045  0212  1C03               	skipc
  1046  0213  2A19               	goto	l1171
  1047                           
  1048                           ;main.c: 279: {
  1049                           ;main.c: 280: rightPWMtemp = 100;
  1050  0214  3064               	movlw	100
  1051  0215  0020               	movlb	0	; select bank0
  1052  0216  00A6               	movwf	main@rightPWMtemp
  1053  0217  3000               	movlw	0
  1054  0218  00A7               	movwf	main@rightPWMtemp+1
  1055  0219                     l1171:	
  1056                           
  1057                           ;main.c: 281: }
  1058                           ;main.c: 283: GIE = 0;
  1059  0219  138B               	bcf	11,7	;volatile
  1060                           
  1061                           ;main.c: 284: if (leftPWMtemp == 0)
  1062  021A  0020               	movlb	0	; select bank0
  1063  021B  0825               	movf	main@leftPWMtemp+1,w
  1064  021C  0424               	iorwf	main@leftPWMtemp,w
  1065  021D  1D03               	skipz
  1066  021E  2A21               	goto	l1177
  1067                           
  1068                           ;main.c: 285: {
  1069                           ;main.c: 286: leftPWM = 0;
  1070  021F  01F1               	clrf	_leftPWM
  1071                           
  1072                           ;main.c: 287: }
  1073  0220  2A26               	goto	l1179
  1074  0221                     l1177:	
  1075                           
  1076                           ;main.c: 288: else
  1077                           ;main.c: 289: {
  1078                           ;main.c: 290: leftPWM = (leftPWMtemp * 2) + 50;
  1079  0221  3524               	lslf	main@leftPWMtemp,w
  1080  0222  3E32               	addlw	50
  1081  0223  00A0               	movwf	??_main
  1082  0224  0820               	movf	??_main,w
  1083  0225  00F1               	movwf	_leftPWM
  1084  0226                     l1179:	
  1085                           
  1086                           ;main.c: 291: }
  1087                           ;main.c: 293: if (rightPWMtemp == 0)
  1088  0226  0827               	movf	main@rightPWMtemp+1,w
  1089  0227  0426               	iorwf	main@rightPWMtemp,w
  1090  0228  1D03               	skipz
  1091  0229  2A2C               	goto	l1183
  1092                           
  1093                           ;main.c: 294: {
  1094                           ;main.c: 295: rightPWM = 0;
  1095  022A  01F3               	clrf	_rightPWM
  1096                           
  1097                           ;main.c: 296: }
  1098  022B  2A31               	goto	l1185
  1099  022C                     l1183:	
  1100                           
  1101                           ;main.c: 297: else
  1102                           ;main.c: 298: {
  1103                           ;main.c: 299: rightPWM = (rightPWMtemp * 2) + 50;
  1104  022C  3526               	lslf	main@rightPWMtemp,w
  1105  022D  3E32               	addlw	50
  1106  022E  00A0               	movwf	??_main
  1107  022F  0820               	movf	??_main,w
  1108  0230  00F3               	movwf	_rightPWM
  1109  0231                     l1185:	
  1110                           
  1111                           ;main.c: 300: }
  1112                           ;main.c: 301: if (leftDir)
  1113  0231  0837               	movf	_leftDir,w
  1114  0232  1903               	btfsc	3,2
  1115  0233  2A38               	goto	l142
  1116                           
  1117                           ;main.c: 302: {
  1118                           ;main.c: 304: LATCbits.LATC0 = 0;
  1119  0234  0022               	movlb	2	; select bank2
  1120  0235  100E               	bcf	14,0	;volatile
  1121                           
  1122                           ;main.c: 305: LATCbits.LATC1 = 1;
  1123  0236  148E               	bsf	14,1	;volatile
  1124                           
  1125                           ;main.c: 306: }
  1126  0237  2A3B               	goto	l1189
  1127  0238                     l142:	
  1128                           
  1129                           ;main.c: 307: else
  1130                           ;main.c: 308: {
  1131                           ;main.c: 309: LATCbits.LATC0 = 1;
  1132  0238  0022               	movlb	2	; select bank2
  1133  0239  140E               	bsf	14,0	;volatile
  1134                           
  1135                           ;main.c: 310: LATCbits.LATC1 = 0;
  1136  023A  108E               	bcf	14,1	;volatile
  1137  023B                     l1189:	
  1138                           
  1139                           ;main.c: 311: }
  1140                           ;main.c: 312: if (rightDir)
  1141  023B  0020               	movlb	0	; select bank0
  1142  023C  0838               	movf	_rightDir,w
  1143  023D  1903               	btfsc	3,2
  1144  023E  2A43               	goto	l144
  1145                           
  1146                           ;main.c: 313: {
  1147                           ;main.c: 315: LATCbits.LATC2 = 0;
  1148  023F  0022               	movlb	2	; select bank2
  1149  0240  110E               	bcf	14,2	;volatile
  1150                           
  1151                           ;main.c: 316: LATCbits.LATC3 = 1;
  1152  0241  158E               	bsf	14,3	;volatile
  1153                           
  1154                           ;main.c: 317: }
  1155  0242  2A46               	goto	l145
  1156  0243                     l144:	
  1157                           
  1158                           ;main.c: 318: else
  1159                           ;main.c: 319: {
  1160                           ;main.c: 320: LATCbits.LATC2 = 1;
  1161  0243  0022               	movlb	2	; select bank2
  1162  0244  150E               	bsf	14,2	;volatile
  1163                           
  1164                           ;main.c: 321: LATCbits.LATC3 = 0;
  1165  0245  118E               	bcf	14,3	;volatile
  1166  0246                     l145:	
  1167                           
  1168                           ;main.c: 322: }
  1169                           ;main.c: 324: GIE = 1;
  1170  0246  178B               	bsf	11,7	;volatile
  1171                           
  1172                           ;main.c: 411: }
  1173  0247  2A4A               	goto	l1193
  1174  0248                     l103:	
  1175                           
  1176                           ;main.c: 412: else
  1177                           ;main.c: 413: {
  1178                           ;main.c: 415: packetCorrupt = 1;
  1179  0248  01F2               	clrf	_packetCorrupt
  1180  0249  0AF2               	incf	_packetCorrupt,f
  1181  024A                     l1193:	
  1182                           
  1183                           ;main.c: 416: }
  1184                           ;main.c: 417: packetReceived = 0;
  1185  024A  0020               	movlb	0	; select bank0
  1186  024B  01B6               	clrf	_packetReceived
  1187  024C  28B7               	goto	l1091
  1188  024D                     __end_of_main:	
  1189                           
  1190                           	psect	text1
  1191  024D                     __ptext1:	
  1192 ;; *************** function _setup *****************
  1193 ;; Defined at:
  1194 ;;		line 136 in file "main.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;		None               void
  1201 ;; Registers used:
  1202 ;;		wreg, status,2, status,0
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: 0/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1212 ;;Total ram usage:        0 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    2
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_main
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           
  1223                           ;psect for function _setup
  1224  024D                     _setup:	
  1225                           
  1226                           ;main.c: 138: OSCCONbits.IRCF = 0b1111;
  1227                           
  1228                           ;incstack = 0
  1229                           ; Regs used in _setup: [wreg+status,2+status,0]
  1230  024D  303C               	movlw	60
  1231  024E  0021               	movlb	1	; select bank1
  1232  024F  0499               	iorwf	25,f	;volatile
  1233                           
  1234                           ;main.c: 141: TRISC5 = 1; TRISC4 = 1; SPBRG = ((int)(16000000L/(16UL * 9600) -1)); RCSTA
      +                           = (0|0x90); TXSTA = (0x4|0|0x20);
  1235  0250  168E               	bsf	14,5	;volatile
  1236  0251  160E               	bsf	14,4	;volatile
  1237  0252  3000               	movlw	0
  1238  0253  0023               	movlb	3	; select bank3
  1239  0254  009C               	movwf	28	;volatile
  1240  0255  3067               	movlw	103
  1241  0256  009B               	movwf	27	;volatile
  1242  0257  3090               	movlw	144
  1243  0258  009D               	movwf	29	;volatile
  1244  0259  3024               	movlw	36
  1245  025A  009E               	movwf	30	;volatile
  1246                           
  1247                           ;main.c: 144: TRISAbits.TRISA4 = 0;
  1248  025B  0021               	movlb	1	; select bank1
  1249  025C  120C               	bcf	12,4	;volatile
  1250                           
  1251                           ;main.c: 145: TRISAbits.TRISA5 = 0;
  1252  025D  128C               	bcf	12,5	;volatile
  1253                           
  1254                           ;main.c: 146: TRISCbits.TRISC0 = 0;
  1255  025E  100E               	bcf	14,0	;volatile
  1256                           
  1257                           ;main.c: 147: TRISCbits.TRISC1 = 0;
  1258  025F  108E               	bcf	14,1	;volatile
  1259                           
  1260                           ;main.c: 148: TRISCbits.TRISC2 = 0;
  1261  0260  110E               	bcf	14,2	;volatile
  1262                           
  1263                           ;main.c: 149: TRISCbits.TRISC3 = 0;
  1264  0261  118E               	bcf	14,3	;volatile
  1265                           
  1266                           ;main.c: 150: TRISCbits.TRISC4 = 0;
  1267  0262  120E               	bcf	14,4	;volatile
  1268                           
  1269                           ;main.c: 151: TRISCbits.TRISC5 = 1;
  1270  0263  168E               	bsf	14,5	;volatile
  1271                           
  1272                           ;main.c: 154: ANSELC = 0x00;
  1273  0264  0023               	movlb	3	; select bank3
  1274  0265  018E               	clrf	14	;volatile
  1275                           
  1276                           ;main.c: 155: ANSELA = 0x00;
  1277  0266  018C               	clrf	12	;volatile
  1278                           
  1279                           ;main.c: 158: LATC = 0x00;
  1280  0267  0022               	movlb	2	; select bank2
  1281  0268  018E               	clrf	14	;volatile
  1282                           
  1283                           ;main.c: 159: LATA = 0x00;
  1284  0269  018C               	clrf	12	;volatile
  1285                           
  1286                           ;main.c: 162: T2CONbits.T2CKPS = 0b11;
  1287  026A  3003               	movlw	3
  1288  026B  0020               	movlb	0	; select bank0
  1289  026C  049C               	iorwf	28,f	;volatile
  1290                           
  1291                           ;main.c: 163: T2CONbits.TMR2ON = 1;
  1292  026D  151C               	bsf	28,2	;volatile
  1293                           
  1294                           ;main.c: 166: RCIE = 1;
  1295  026E  0021               	movlb	1	; select bank1
  1296  026F  1691               	bsf	17,5	;volatile
  1297                           
  1298                           ;main.c: 167: TMR2IE = 1;
  1299  0270  1491               	bsf	17,1	;volatile
  1300                           
  1301                           ;main.c: 168: PEIE = 1;
  1302  0271  170B               	bsf	11,6	;volatile
  1303                           
  1304                           ;main.c: 169: GIE = 1;
  1305  0272  178B               	bsf	11,7	;volatile
  1306  0273  0008               	return
  1307  0274                     __end_of_setup:	
  1308                           
  1309                           	psect	intentry
  1310  0004                     __pintentry:	
  1311 ;; *************** function _ISR *****************
  1312 ;; Defined at:
  1313 ;;		line 49 in file "main.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;		None
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;		None
  1318 ;; Return value:  Size  Location     Type
  1319 ;;		None               void
  1320 ;; Registers used:
  1321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1328 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1329 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1330 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1331 ;;Total ram usage:        5 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    1
  1334 ;; This function calls:
  1335 ;;		_getch
  1336 ;; This function is called by:
  1337 ;;		Interrupt level 1
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341  0004                     _ISR:	
  1342                           
  1343                           ;incstack = 0
  1344                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1345  0004  3180               	pagesel	$
  1346  0005  0020               	movlb	0	; select bank0
  1347  0006  087F               	movf	127,w
  1348  0007  00F7               	movwf	??_ISR+2
  1349                           
  1350                           ;main.c: 50: if (TMR2IF)
  1351  0008  1C91               	btfss	17,1	;volatile
  1352  0009  2866               	goto	i1l1021
  1353                           
  1354                           ;main.c: 51: {
  1355                           ;main.c: 52: if (PR2 == 0xff)
  1356  000A  081B               	movf	27,w	;volatile
  1357  000B  3AFF               	xorlw	255
  1358  000C  1D03               	skipz
  1359  000D  2838               	goto	i1l989
  1360                           
  1361                           ;main.c: 53: {
  1362                           ;main.c: 54: if (leftPWM > 0 && rightPWM > 0)
  1363  000E  0871               	movf	_leftPWM,w
  1364  000F  1903               	btfsc	3,2
  1365  0010  2826               	goto	i1l977
  1366  0011  0873               	movf	_rightPWM,w
  1367  0012  1903               	btfsc	3,2
  1368  0013  2826               	goto	i1l977
  1369                           
  1370                           ;main.c: 55: {
  1371                           ;main.c: 56: PR2 = leftPWM < rightPWM ? leftPWM : rightPWM;
  1372  0014  0873               	movf	_rightPWM,w
  1373  0015  0271               	subwf	_leftPWM,w
  1374  0016  1C03               	skipc
  1375  0017  281A               	goto	i1l971
  1376  0018  0873               	movf	_rightPWM,w
  1377  0019  281B               	goto	L13
  1378  001A                     i1l971:	
  1379  001A  0871               	movf	_leftPWM,w
  1380  001B                     L13:	
  1381  001B  00F5               	movwf	??_ISR
  1382  001C  01F6               	clrf	??_ISR+1
  1383  001D  0875               	movf	??_ISR,w
  1384  001E  00F8               	movwf	_ISR$162
  1385  001F  0876               	movf	??_ISR+1,w
  1386  0020  00F9               	movwf	_ISR$162+1
  1387  0021  0878               	movf	_ISR$162,w
  1388  0022  009B               	movwf	27	;volatile
  1389                           
  1390                           ;main.c: 57: LATAbits.LATA4 = 1;
  1391  0023  0022               	movlb	2	; select bank2
  1392  0024  160C               	bsf	12,4	;volatile
  1393  0025  2836               	goto	L14
  1394  0026                     i1l977:	
  1395                           ;main.c: 60: }
  1396                           
  1397                           ;main.c: 58: LATAbits.LATA5 = 1;
  1398                           
  1399                           
  1400                           ;main.c: 61: else if (leftPWM > 0)
  1401  0026  0871               	movf	_leftPWM,w
  1402  0027  1903               	btfsc	3,2
  1403  0028  282F               	goto	i1l983
  1404                           
  1405                           ;main.c: 62: {
  1406                           ;main.c: 63: PR2 = leftPWM;
  1407  0029  0871               	movf	_leftPWM,w
  1408  002A  0020               	movlb	0	; select bank0
  1409  002B  009B               	movwf	27	;volatile
  1410                           
  1411                           ;main.c: 64: LATAbits.LATA4 = 1;
  1412  002C  0022               	movlb	2	; select bank2
  1413  002D  160C               	bsf	12,4	;volatile
  1414                           
  1415                           ;main.c: 65: }
  1416  002E  2866               	goto	i1l1021
  1417  002F                     i1l983:	
  1418                           
  1419                           ;main.c: 66: else if (rightPWM > 0)
  1420  002F  0873               	movf	_rightPWM,w
  1421  0030  1903               	btfsc	3,2
  1422  0031  2866               	goto	i1l1021
  1423                           
  1424                           ;main.c: 67: {
  1425                           ;main.c: 68: PR2 = rightPWM;
  1426  0032  0873               	movf	_rightPWM,w
  1427  0033  0020               	movlb	0	; select bank0
  1428  0034  009B               	movwf	27	;volatile
  1429                           
  1430                           ;main.c: 69: LATAbits.LATA5 = 1;
  1431  0035  0022               	movlb	2	; select bank2
  1432  0036                     L14:	
  1433  0036  168C               	bsf	12,5	;volatile
  1434                           
  1435                           ;main.c: 70: }
  1436                           ;main.c: 71: }
  1437  0037  2866               	goto	i1l1021
  1438  0038                     i1l989:	
  1439                           
  1440                           ;main.c: 72: else
  1441                           ;main.c: 73: {
  1442                           ;main.c: 74: if (PR2 == leftPWM && leftPWM == rightPWM)
  1443  0038  0020               	movlb	0	; select bank0
  1444  0039  081B               	movf	27,w	;volatile
  1445  003A  0671               	xorwf	_leftPWM,w
  1446  003B  1D03               	skipz
  1447  003C  2845               	goto	i1l997
  1448  003D  0871               	movf	_leftPWM,w
  1449  003E  0673               	xorwf	_rightPWM,w
  1450  003F  1D03               	skipz
  1451  0040  2845               	goto	i1l997
  1452                           
  1453                           ;main.c: 75: {
  1454                           ;main.c: 76: LATAbits.LATA4 = 0;
  1455  0041  0022               	movlb	2	; select bank2
  1456  0042  120C               	bcf	12,4	;volatile
  1457                           
  1458                           ;main.c: 77: LATAbits.LATA5 = 0;
  1459  0043  128C               	bcf	12,5	;volatile
  1460  0044  285E               	goto	L18
  1461  0045                     i1l997:	
  1462                           ;main.c: 79: }
  1463                           
  1464                           ;main.c: 78: PR2 = 0xff;
  1465                           
  1466                           
  1467                           ;main.c: 80: else
  1468                           ;main.c: 81: {
  1469                           ;main.c: 82: if (PR2 == leftPWM)
  1470  0045  081B               	movf	27,w	;volatile
  1471  0046  0671               	xorwf	_leftPWM,w
  1472  0047  1D03               	skipz
  1473  0048  2854               	goto	i1l1009
  1474                           
  1475                           ;main.c: 83: {
  1476                           ;main.c: 84: LATAbits.LATA4 = 0;
  1477  0049  0022               	movlb	2	; select bank2
  1478  004A  120C               	bcf	12,4	;volatile
  1479                           
  1480                           ;main.c: 85: if (leftPWM > rightPWM)
  1481  004B  0871               	movf	_leftPWM,w
  1482  004C  0273               	subwf	_rightPWM,w
  1483  004D  1C03               	btfss	3,0
  1484  004E  285E               	goto	L18
  1485                           
  1486                           ;main.c: 89: else if (rightPWM != 0)
  1487                           
  1488                           ;main.c: 88: }
  1489                           
  1490                           ;main.c: 86: {
  1491                           ;main.c: 87: PR2 = 0xff;
  1492  004F  0873               	movf	_rightPWM,w
  1493  0050  1903               	btfsc	3,2
  1494  0051  2866               	goto	i1l1021
  1495                           
  1496                           ;main.c: 90: {
  1497                           ;main.c: 91: PR2 = rightPWM;
  1498  0052  0873               	movf	_rightPWM,w
  1499  0053  2864               	goto	L17
  1500  0054                     i1l1009:	
  1501                           ;main.c: 92: }
  1502                           ;main.c: 93: }
  1503                           
  1504                           
  1505                           ;main.c: 94: else if (PR2 == rightPWM)
  1506  0054  081B               	movf	27,w	;volatile
  1507  0055  0673               	xorwf	_rightPWM,w
  1508  0056  1D03               	skipz
  1509  0057  2866               	goto	i1l1021
  1510                           
  1511                           ;main.c: 95: {
  1512                           ;main.c: 96: LATAbits.LATA5 = 0;
  1513  0058  0022               	movlb	2	; select bank2
  1514  0059  128C               	bcf	12,5	;volatile
  1515                           
  1516                           ;main.c: 97: if (rightPWM >= leftPWM)
  1517  005A  0871               	movf	_leftPWM,w
  1518  005B  0273               	subwf	_rightPWM,w
  1519  005C  1C03               	skipc
  1520  005D  2860               	goto	i1l1017
  1521  005E                     L18:	
  1522                           
  1523                           ;main.c: 98: {
  1524                           ;main.c: 99: PR2 = 0xff;
  1525  005E  30FF               	movlw	255
  1526  005F  2864               	goto	L17
  1527  0060                     i1l1017:	
  1528                           ;main.c: 100: }
  1529                           
  1530                           
  1531                           ;main.c: 101: else if (leftPWM != 0)
  1532  0060  0871               	movf	_leftPWM,w
  1533  0061  1903               	btfsc	3,2
  1534  0062  2866               	goto	i1l1021
  1535                           
  1536                           ;main.c: 102: {
  1537                           ;main.c: 103: PR2 = leftPWM;
  1538  0063  0871               	movf	_leftPWM,w
  1539  0064                     L17:	
  1540  0064  0020               	movlb	0	; select bank0
  1541  0065  009B               	movwf	27	;volatile
  1542  0066                     i1l1021:	
  1543                           
  1544                           ;main.c: 104: }
  1545                           ;main.c: 105: }
  1546                           ;main.c: 106: }
  1547                           ;main.c: 107: }
  1548                           ;main.c: 108: }
  1549                           ;main.c: 109: if (RCIF)
  1550  0066  0020               	movlb	0	; select bank0
  1551  0067  1E91               	btfss	17,5	;volatile
  1552  0068  288B               	goto	i1l94
  1553                           
  1554                           ;main.c: 110: {
  1555                           ;main.c: 111: rxchar = getch();
  1556  0069  3182  2274  3180   	fcall	_getch
  1557  006C  00F5               	movwf	??_ISR
  1558  006D  0875               	movf	??_ISR,w
  1559  006E  00F4               	movwf	_rxchar
  1560                           
  1561                           ;main.c: 112: if (packetCorrupt)
  1562  006F  0872               	movf	_packetCorrupt,w
  1563  0070  1903               	btfsc	3,2
  1564  0071  2877               	goto	i1l1031
  1565                           
  1566                           ;main.c: 113: {
  1567                           ;main.c: 115: if (rxchar == 0x02)
  1568  0072  0874               	movf	_rxchar,w
  1569  0073  3A02               	xorlw	2
  1570  0074  1D03               	skipz
  1571  0075  288B               	goto	i1l94
  1572                           
  1573                           ;main.c: 116: {
  1574                           ;main.c: 118: packetCorrupt = 0;
  1575  0076  01F2               	clrf	_packetCorrupt
  1576  0077                     i1l1031:	
  1577                           ;main.c: 120: else
  1578                           ;main.c: 121: {
  1579                           ;main.c: 122: return;
  1580                           
  1581                           ;main.c: 119: }
  1582                           
  1583                           
  1584                           ;main.c: 123: }
  1585                           ;main.c: 124: }
  1586                           ;main.c: 125: packetBuffer[i] = rxchar;
  1587  0077  0874               	movf	_rxchar,w
  1588  0078  00F5               	movwf	??_ISR
  1589  0079  0870               	movf	_i,w
  1590  007A  3E30               	addlw	_packetBuffer& (0+255)
  1591  007B  0086               	movwf	6
  1592  007C  0187               	clrf	7
  1593  007D  0875               	movf	??_ISR,w
  1594  007E  0081               	movwf	1
  1595                           
  1596                           ;main.c: 126: i++;
  1597  007F  3001               	movlw	1
  1598  0080  00F5               	movwf	??_ISR
  1599  0081  0875               	movf	??_ISR,w
  1600  0082  07F0               	addwf	_i,f
  1601                           
  1602                           ;main.c: 127: if (i >= 6)
  1603  0083  3006               	movlw	6
  1604  0084  0270               	subwf	_i,w
  1605  0085  1C03               	skipc
  1606  0086  288B               	goto	i1l94
  1607                           
  1608                           ;main.c: 128: {
  1609                           ;main.c: 129: packetReceived = 1;
  1610  0087  0020               	movlb	0	; select bank0
  1611  0088  01B6               	clrf	_packetReceived
  1612  0089  0AB6               	incf	_packetReceived,f
  1613                           
  1614                           ;main.c: 130: i = 0;
  1615  008A  01F0               	clrf	_i
  1616  008B                     i1l94:	
  1617  008B  0877               	movf	??_ISR+2,w
  1618  008C  0020               	movlb	0	; select bank0
  1619  008D  00FF               	movwf	127
  1620  008E  0009               	retfie
  1621  008F                     __end_of_ISR:	
  1622                           
  1623                           	psect	text3
  1624  0274                     __ptext3:	
  1625 ;; *************** function _getch *****************
  1626 ;; Defined at:
  1627 ;;		line 15 in file "usart.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      unsigned char 
  1634 ;; Registers used:
  1635 ;;		wreg
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1645 ;;Total ram usage:        0 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; This function calls:
  1648 ;;		Nothing
  1649 ;; This function is called by:
  1650 ;;		_ISR
  1651 ;;		_getche
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function _getch
  1657  0274                     _getch:	
  1658  0274                     i1l166:	
  1659                           ;usart.c: 18: continue;
  1660                           
  1661                           ;usart.c: 17: while(!RCIF)
  1662                           
  1663                           ;incstack = 0
  1664                           ; Regs used in _getch: [wreg]
  1665                           
  1666  0274  0020               	movlb	0	; select bank0
  1667  0275  1E91               	btfss	17,5	;volatile
  1668  0276  2A74               	goto	i1l166
  1669                           
  1670                           ;usart.c: 19: return RCREG;
  1671  0277  0023               	movlb	3	; select bank3
  1672  0278  0819               	movf	25,w	;volatile
  1673  0279  0008               	return
  1674  027A                     __end_of_getch:	
  1675  007E                     btemp	set	126	;btemp
  1676  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     16      25
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0    1194
                                              0 BANK0     16    16      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0      24
                                              0 COMMON     5     5      0
                              _getch
 ---------------------------------------------------------------------------------
 (3) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup

 _ISR (ROOT)
   _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     10      19       5       31.2%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      23      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      28      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Jan  9 04:54:50 2014

                      _i 0070              __CFG_CP$OFF 0000                      l103 0248  
                    l114 012B                      l123 016B                      l124 0192  
                    l108 00F6                      l142 0238                      l144 0243  
                    l145 0246                      _GIE 005F                      _PR2 001B  
                    _ISR 0004                      u975 0136                      u985 0155  
                    u995 017C             __CFG_BORV$LO 0000             __CFG_LVP$OFF 0000  
                   ?_ISR 0075                     l1101 00DF                     l1121 012D  
                   l1113 0114                     l1105 00EA                     l1131 0164  
                   l1125 0145                     l1117 011F                     l1109 00F8  
                   l1143 01A4                     l1127 014C                     l1161 01F1  
                   l1153 01D1                     l1171 0219                     l1155 01D6  
                   l1139 018E                     l1091 00B7                     l1183 022C  
                   l1167 0208                     l1193 024A                     l1185 0231  
                   l1177 0221                     l1179 0226                     l1189 023B  
                   u1025 01B4                     u1035 01C2                     u1045 01E1  
                   u1055 0201                     u1065 0212                     _LATA 010C  
                   _LATC 010E                     _PEIE 005E                     _RCIE 048D  
                   _RCIF 008D                     i1l94 008B                     _TXIF 008C  
           __CFG_WRT$OFF 0000                     _main 00A7                     fsr1h 0007  
                   indf1 0001                     fsr1l 0006                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 008F            __CFG_IESO$OFF 0000  
    __CFG_PLLEN$DISABLED 0000            __CFG_MCLRE$ON 0000                    ??_ISR 0075  
                  ?_main 0075            __CFG_WDTE$OFF 0000                    i1l166 0274  
                  i1l971 001A                    i1l983 002F                    i1l977 0026  
                  i1l997 0045                    i1l989 0038                    _RCREG 0199  
                  _RCSTA 019D                    _SPBRG 019B                    _TXREG 019A  
                  _TXSTA 019E            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
                  _getch 0274                    _setup 024D                    main@x 002C  
                  main@y 002E                    wtemp0 007E          __initialization 0091  
           __end_of_main 024D           __CFG_LPBOR$OFF 0000                   ??_main 0020  
    __CFG_USBLSCLK$48MHz 0000                   ?_getch 0075                   ?_setup 0075  
                 _ANSELA 018C                   _ANSELC 018E            _packetCorrupt 0072  
                 i1l1021 0066                   i1l1031 0077                   i1l1017 0060  
                 i1l1009 0054                   _TMR2IE 0489                   _TMR2IF 0089  
                 _TRISC4 0474                   _TRISC5 0475           __CFG_STVREN$ON 0000  
                 _rxchar 0074  __end_of__initialization 00A4           __pcstackCOMMON 0075  
           __pidataBANK0 027A            __end_of_getch 027A            __end_of_setup 0274  
                ??_getch 0075                  ??_setup 0020               __pbssBANK0 0030  
             __pmaintext 00A7          __CFG_PLLMULT$3x 0000               __pintentry 0004  
                _ISR$162 0078           _packetReceived 0036                  __ptext1 024D  
                __ptext3 0274                  _leftPWM 0071                  _leftDir 0037  
           __size_of_ISR 008B                _T2CONbits 001C     end_of_initialization 00A4  
       __CFG_FOSC$INTOSC 0000                _TRISAbits 008C                _TRISCbits 008E  
    start_initialization 0091              __end_of_ISR 008F             _packetBuffer 0030  
            __pdataBANK0 0037              __pbssCOMMON 0070            __pcstackBANK0 0020  
       main@rightPWMtemp 0026          main@leftPWMtemp 0024           __size_of_getch 0006  
         __size_of_setup 0027                 _LATAbits 010C                 _LATCbits 010E  
          __size_of_main 01A6                 _rightPWM 0073                 _rightDir 0038  
               main@xAbs 0028                 main@yAbs 002A                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000               _OSCCONbits 0099      __CFG_CPUDIV$CLKDIV2 0000  
