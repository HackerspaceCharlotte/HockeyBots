

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Fri Jan 10 02:46:31 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F1455
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     	;# 
    20  0001                     	;# 
    21  0002                     	;# 
    22  0003                     	;# 
    23  0004                     	;# 
    24  0005                     	;# 
    25  0006                     	;# 
    26  0007                     	;# 
    27  0008                     	;# 
    28  0009                     	;# 
    29  000A                     	;# 
    30  000B                     	;# 
    31  000C                     	;# 
    32  000E                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0015                     	;# 
    36  0016                     	;# 
    37  0016                     	;# 
    38  0017                     	;# 
    39  0018                     	;# 
    40  0019                     	;# 
    41  001A                     	;# 
    42  001B                     	;# 
    43  001C                     	;# 
    44  008C                     	;# 
    45  008E                     	;# 
    46  0091                     	;# 
    47  0092                     	;# 
    48  0095                     	;# 
    49  0096                     	;# 
    50  0097                     	;# 
    51  0098                     	;# 
    52  0099                     	;# 
    53  009A                     	;# 
    54  009B                     	;# 
    55  009B                     	;# 
    56  009C                     	;# 
    57  009D                     	;# 
    58  009E                     	;# 
    59  009F                     	;# 
    60  010C                     	;# 
    61  010E                     	;# 
    62  0111                     	;# 
    63  0112                     	;# 
    64  0113                     	;# 
    65  0114                     	;# 
    66  0115                     	;# 
    67  0116                     	;# 
    68  0117                     	;# 
    69  0118                     	;# 
    70  0119                     	;# 
    71  011D                     	;# 
    72  018C                     	;# 
    73  018E                     	;# 
    74  0191                     	;# 
    75  0191                     	;# 
    76  0192                     	;# 
    77  0193                     	;# 
    78  0193                     	;# 
    79  0194                     	;# 
    80  0195                     	;# 
    81  0196                     	;# 
    82  0197                     	;# 
    83  0199                     	;# 
    84  019A                     	;# 
    85  019B                     	;# 
    86  019B                     	;# 
    87  019C                     	;# 
    88  019D                     	;# 
    89  019E                     	;# 
    90  019F                     	;# 
    91  020C                     	;# 
    92  0211                     	;# 
    93  0211                     	;# 
    94  0212                     	;# 
    95  0212                     	;# 
    96  0213                     	;# 
    97  0213                     	;# 
    98  0214                     	;# 
    99  0214                     	;# 
   100  0215                     	;# 
   101  0215                     	;# 
   102  0215                     	;# 
   103  0216                     	;# 
   104  0216                     	;# 
   105  0217                     	;# 
   106  0217                     	;# 
   107  0391                     	;# 
   108  0392                     	;# 
   109  0393                     	;# 
   110  039A                     	;# 
   111  039B                     	;# 
   112  0611                     	;# 
   113  0612                     	;# 
   114  0613                     	;# 
   115  0613                     	;# 
   116  0614                     	;# 
   117  0615                     	;# 
   118  0616                     	;# 
   119  0616                     	;# 
   120  0691                     	;# 
   121  0692                     	;# 
   122  0693                     	;# 
   123  0694                     	;# 
   124  0695                     	;# 
   125  0E8E                     	;# 
   126  0E8F                     	;# 
   127  0E90                     	;# 
   128  0E91                     	;# 
   129  0E92                     	;# 
   130  0E93                     	;# 
   131  0E94                     	;# 
   132  0E94                     	;# 
   133  0E95                     	;# 
   134  0E96                     	;# 
   135  0E97                     	;# 
   136  0E98                     	;# 
   137  0E99                     	;# 
   138  0E9A                     	;# 
   139  0E9B                     	;# 
   140  0E9C                     	;# 
   141  0E9D                     	;# 
   142  0E9E                     	;# 
   143  0E9F                     	;# 
   144  0FE4                     	;# 
   145  0FE5                     	;# 
   146  0FE6                     	;# 
   147  0FE7                     	;# 
   148  0FE8                     	;# 
   149  0FE9                     	;# 
   150  0FEA                     	;# 
   151  0FEB                     	;# 
   152  0FED                     	;# 
   153  0FEE                     	;# 
   154  0FEF                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000E                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008E                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0098                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  010C                     	;# 
   197  010E                     	;# 
   198  0111                     	;# 
   199  0112                     	;# 
   200  0113                     	;# 
   201  0114                     	;# 
   202  0115                     	;# 
   203  0116                     	;# 
   204  0117                     	;# 
   205  0118                     	;# 
   206  0119                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020C                     	;# 
   228  0211                     	;# 
   229  0211                     	;# 
   230  0212                     	;# 
   231  0212                     	;# 
   232  0213                     	;# 
   233  0213                     	;# 
   234  0214                     	;# 
   235  0214                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0216                     	;# 
   240  0216                     	;# 
   241  0217                     	;# 
   242  0217                     	;# 
   243  0391                     	;# 
   244  0392                     	;# 
   245  0393                     	;# 
   246  039A                     	;# 
   247  039B                     	;# 
   248  0611                     	;# 
   249  0612                     	;# 
   250  0613                     	;# 
   251  0613                     	;# 
   252  0614                     	;# 
   253  0615                     	;# 
   254  0616                     	;# 
   255  0616                     	;# 
   256  0691                     	;# 
   257  0692                     	;# 
   258  0693                     	;# 
   259  0694                     	;# 
   260  0695                     	;# 
   261  0E8E                     	;# 
   262  0E8F                     	;# 
   263  0E90                     	;# 
   264  0E91                     	;# 
   265  0E92                     	;# 
   266  0E93                     	;# 
   267  0E94                     	;# 
   268  0E94                     	;# 
   269  0E95                     	;# 
   270  0E96                     	;# 
   271  0E97                     	;# 
   272  0E98                     	;# 
   273  0E99                     	;# 
   274  0E9A                     	;# 
   275  0E9B                     	;# 
   276  0E9C                     	;# 
   277  0E9D                     	;# 
   278  0E9E                     	;# 
   279  0E9F                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291                           
   292                           	psect	idataBANK0
   293  02FA                     __pidataBANK0:	
   294                           
   295                           ;initializer for _checkBattery
   296  02FA  3401               	retlw	1
   297                           
   298                           ;initializer for _leftDir
   299  02FB  3401               	retlw	1
   300                           
   301                           ;initializer for _rightDir
   302  02FC  3401               	retlw	1
   303                           
   304                           	psect	strings
   305  02F6                     __pstrings:	
   306  02F6                     __stringtab:	
   307  02F6  3400               	retlw	0
   308  02F7                     __end_of__stringtab:	
   309  02F7                     _CUTOFF_VOLTAGE:	
   310  02F7  3480               	retlw	128
   311  02F8  348D               	retlw	141
   312  02F9                     __end_of_CUTOFF_VOLTAGE:	
   313  02F9                     _SPEED_INCREMENTS:	
   314  02F9  3408               	retlw	8
   315  02FA                     __end_of_SPEED_INCREMENTS:	
   316  008E                     _ADIF	set	142
   317  005F                     _GIE	set	95
   318  005E                     _PEIE	set	94
   319  008D                     _RCIF	set	141
   320  008C                     _TXIF	set	140
   321  009B                     _ADRES	set	155
   322  009D                     _ADCON0bits	set	157
   323  009E                     _ADCON1bits	set	158
   324  0099                     _OSCCONbits	set	153
   325  008C                     _TRISAbits	set	140
   326  008E                     _TRISCbits	set	142
   327  04E9                     _ADGO	set	1257
   328  048E                     _ADIE	set	1166
   329  04E8                     _ADON	set	1256
   330  048D                     _RCIE	set	1165
   331  0474                     _TRISC4	set	1140
   332  0475                     _TRISC5	set	1141
   333  010C                     _LATA	set	268
   334  010C                     _LATAbits	set	268
   335  010E                     _LATC	set	270
   336  010E                     _LATCbits	set	270
   337  019B                     _SPBRG	set	411
   338  018C                     _ANSELA	set	396
   339  018C                     _ANSELAbits	set	396
   340  018E                     _ANSELC	set	398
   341  0199                     _RCREG	set	409
   342  019D                     _RCSTA	set	413
   343  019A                     _TXREG	set	410
   344  019E                     _TXSTA	set	414
   345                           
   346                           ; #config settings
   347  0000                     
   348                           	psect	cinit
   349  004E                     start_initialization:	
   350  004E                     __initialization:	
   351                           
   352                           ; Clear objects allocated to COMMON
   353  004E  01F8               	clrf	__pbssCOMMON& (0+127)
   354  004F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   355                           
   356                           ; Clear objects allocated to BANK0
   357  0050  01B6               	clrf	__pbssBANK0& (0+127)
   358  0051  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   359  0052  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   360  0053  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   361  0054  01BA               	clrf	(__pbssBANK0+4)& (0+127)
   362  0055  01BB               	clrf	(__pbssBANK0+5)& (0+127)
   363  0056  01BC               	clrf	(__pbssBANK0+6)& (0+127)
   364  0057  01BD               	clrf	(__pbssBANK0+7)& (0+127)
   365  0058  01BE               	clrf	(__pbssBANK0+8)& (0+127)
   366  0059  01BF               	clrf	(__pbssBANK0+9)& (0+127)
   367  005A  01C0               	clrf	(__pbssBANK0+10)& (0+127)
   368                           
   369                           ; Initialize objects allocated to BANK0
   370  005B  3182  22FA  3180   	fcall	__pidataBANK0	;fetch initializer
   371  005E  00C1               	movwf	__pdataBANK0& (0+127)
   372  005F  3182  22FB  3180   	fcall	__pidataBANK0+1	;fetch initializer
   373  0062  00C2               	movwf	(__pdataBANK0+1)& (0+127)
   374  0063  3182  22FC         	fcall	__pidataBANK0+2	;fetch initializer
   375  0065  00C3               	movwf	(__pdataBANK0+2)& (0+127)
   376  0066                     end_of_initialization:	
   377                           ;End of C runtime variable initialization code
   378                           
   379  0066                     __end_of__initialization:	
   380  0066  0020               	movlb	0
   381  0067  3180  2869         	ljmp	_main	;jump to C main() function
   382                           
   383                           	psect	bssCOMMON
   384  0078                     __pbssCOMMON:	
   385  0078                     _i:	
   386  0078                     	ds	1
   387  0079                     _rxchar:	
   388  0079                     	ds	1
   389                           
   390                           	psect	bssBANK0
   391  0036                     __pbssBANK0:	
   392  0036                     _packetBuffer:	
   393  0036                     	ds	6
   394  003C                     _batteryLow:	
   395  003C                     	ds	1
   396  003D                     _leftPWM:	
   397  003D                     	ds	1
   398  003E                     _packetCorrupt:	
   399  003E                     	ds	1
   400  003F                     _packetReceived:	
   401  003F                     	ds	1
   402  0040                     _rightPWM:	
   403  0040                     	ds	1
   404                           
   405                           	psect	dataBANK0
   406  0041                     __pdataBANK0:	
   407  0041                     _checkBattery:	
   408  0041                     	ds	1
   409  0042                     _leftDir:	
   410  0042                     	ds	1
   411  0043                     _rightDir:	
   412  0043                     	ds	1
   413                           
   414                           	psect	cstackCOMMON
   415  0070                     __pcstackCOMMON:	
   416  0070                     ??_getch:	
   417  0070                     ?_ISR:	
   418                           ; 0 bytes @ 0x0
   419                           
   420  0070                     ??_ISR:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ?_setup:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ?_checkBatteryVoltage:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ?_main:	
   430                           ; 0 bytes @ 0x0
   431                           
   432  0070                     ?_getch:	
   433                           ; 0 bytes @ 0x0
   434                           
   435                           
   436                           ; 1 bytes @ 0x0
   437  0070                     	ds	3
   438  0073                     ??_setup:	
   439  0073                     ??_checkBatteryVoltage:	
   440                           ; 0 bytes @ 0x3
   441                           
   442  0073                     ?___awdiv:	
   443                           ; 0 bytes @ 0x3
   444                           
   445  0073                     ___awdiv@divisor:	
   446                           ; 2 bytes @ 0x3
   447                           
   448                           
   449                           ; 2 bytes @ 0x3
   450  0073                     	ds	2
   451  0075                     ___awdiv@dividend:	
   452                           
   453                           ; 2 bytes @ 0x5
   454  0075                     	ds	2
   455  0077                     ??___awdiv:	
   456                           
   457                           ; 0 bytes @ 0x7
   458  0077                     	ds	1
   459                           
   460                           	psect	cstackBANK0
   461  0020                     __pcstackBANK0:	
   462  0020                     ___awdiv@counter:	
   463                           
   464                           ; 1 bytes @ 0x0
   465  0020                     	ds	1
   466  0021                     ___awdiv@sign:	
   467                           
   468                           ; 1 bytes @ 0x1
   469  0021                     	ds	1
   470  0022                     ___awdiv@quotient:	
   471                           
   472                           ; 2 bytes @ 0x2
   473  0022                     	ds	2
   474  0024                     ??_main:	
   475                           
   476                           ; 0 bytes @ 0x4
   477  0024                     	ds	4
   478  0028                     main@leftPWMtemp:	
   479                           
   480                           ; 2 bytes @ 0x8
   481  0028                     	ds	2
   482  002A                     main@rightPWMtemp:	
   483                           
   484                           ; 2 bytes @ 0xA
   485  002A                     	ds	2
   486  002C                     main@pwmCount:	
   487                           
   488                           ; 2 bytes @ 0xC
   489  002C                     	ds	2
   490  002E                     main@xAbs:	
   491                           
   492                           ; 2 bytes @ 0xE
   493  002E                     	ds	2
   494  0030                     main@yAbs:	
   495                           
   496                           ; 2 bytes @ 0x10
   497  0030                     	ds	2
   498  0032                     main@x:	
   499                           
   500                           ; 2 bytes @ 0x12
   501  0032                     	ds	2
   502  0034                     main@y:	
   503                           
   504                           ; 2 bytes @ 0x14
   505  0034                     	ds	2
   506                           
   507                           	psect	maintext
   508  0069                     __pmaintext:	
   509 ;;
   510 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   511 ;;
   512 ;; *************** function _main *****************
   513 ;; Defined at:
   514 ;;		line 147 in file "main.c"
   515 ;; Parameters:    Size  Location     Type
   516 ;;		None
   517 ;; Auto vars:     Size  Location     Type
   518 ;;  y               2   20[BANK0 ] int 
   519 ;;  x               2   18[BANK0 ] int 
   520 ;;  yAbs            2   16[BANK0 ] int 
   521 ;;  xAbs            2   14[BANK0 ] int 
   522 ;;  pwmCount        2   12[BANK0 ] int 
   523 ;;  rightPWMtemp    2   10[BANK0 ] int 
   524 ;;  leftPWMtemp     2    8[BANK0 ] int 
   525 ;; Return value:  Size  Location     Type
   526 ;;		None               void
   527 ;; Registers used:
   528 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   529 ;; Tracked objects:
   530 ;;		On entry : 17F/0
   531 ;;		On exit  : 0/0
   532 ;;		Unchanged: 0/0
   533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   535 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
   536 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   537 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
   538 ;;Total ram usage:       18 bytes
   539 ;; Hardware stack levels required when called:    3
   540 ;; This function calls:
   541 ;;		_setup
   542 ;;		_checkBatteryVoltage
   543 ;;		___awdiv
   544 ;; This function is called by:
   545 ;;		Startup code after reset
   546 ;; This function uses a non-reentrant model
   547 ;;
   548                           
   549                           
   550                           ;psect for function _main
   551  0069                     _main:	
   552                           
   553                           ;main.c: 148: int x = 0;
   554                           
   555                           ;incstack = 0
   556                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   557  0069  0020               	movlb	0	; select bank0
   558  006A  01B2               	clrf	main@x
   559  006B  01B3               	clrf	main@x+1
   560                           
   561                           ;main.c: 149: int y = 0;
   562  006C  01B4               	clrf	main@y
   563  006D  01B5               	clrf	main@y+1
   564                           
   565                           ;main.c: 150: int leftPWMtemp = 0;
   566  006E  01A8               	clrf	main@leftPWMtemp
   567  006F  01A9               	clrf	main@leftPWMtemp+1
   568                           
   569                           ;main.c: 151: int rightPWMtemp = 0;
   570  0070  01AA               	clrf	main@rightPWMtemp
   571  0071  01AB               	clrf	main@rightPWMtemp+1
   572                           
   573                           ;main.c: 152: int xAbs = 0;
   574  0072  01AE               	clrf	main@xAbs
   575  0073  01AF               	clrf	main@xAbs+1
   576                           
   577                           ;main.c: 153: int yAbs = 0;
   578  0074  01B0               	clrf	main@yAbs
   579  0075  01B1               	clrf	main@yAbs+1
   580                           
   581                           ;main.c: 154: int pwmCount = 0;
   582  0076  01AC               	clrf	main@pwmCount
   583  0077  01AD               	clrf	main@pwmCount+1
   584                           
   585                           ;main.c: 156: setup();
   586  0078  3182  22BE  3180   	fcall	_setup
   587  007B                     l911:	
   588                           ;main.c: 157: while (1)
   589                           
   590                           
   591                           ;main.c: 158: {
   592                           ;main.c: 159: if(checkBattery)
   593  007B  0020               	movlb	0	; select bank0
   594  007C  0841               	movf	_checkBattery,w
   595  007D  1903               	btfsc	3,2
   596  007E  2883               	goto	l915
   597                           
   598                           ;main.c: 160: {
   599                           ;main.c: 161: checkBatteryVoltage();
   600  007F  3182  22EA  3180   	fcall	_checkBatteryVoltage
   601  0082  0020               	movlb	0	; select bank0
   602  0083                     l915:	
   603                           
   604                           ;main.c: 162: }
   605                           ;main.c: 163: if (batteryLow)
   606  0083  0020               	movlb	0	; select bank0
   607  0084  083C               	movf	_batteryLow,w
   608  0085  1903               	btfsc	3,2
   609  0086  288B               	goto	l919
   610                           
   611                           ;main.c: 164: {
   612                           ;main.c: 165: LATCbits.LATC4 = 0;
   613  0087  0022               	movlb	2	; select bank2
   614  0088  120E               	bcf	14,4	;volatile
   615                           
   616                           ;main.c: 166: LATAbits.LATA5 = 0;
   617  0089  128C               	bcf	12,5	;volatile
   618                           
   619                           ;main.c: 167: continue;
   620  008A  287B               	goto	l911
   621  008B                     l919:	
   622                           
   623                           ;main.c: 168: }
   624                           ;main.c: 169: if (packetReceived)
   625  008B  0020               	movlb	0	; select bank0
   626  008C  083F               	movf	_packetReceived,w
   627  008D  1903               	btfsc	3,2
   628  008E  2A2C               	goto	l1011
   629                           
   630                           ;main.c: 170: {
   631                           ;main.c: 171: if (packetBuffer[0] == 0x02 && packetBuffer[5] == 0x03)
   632  008F  0836               	movf	_packetBuffer,w
   633  0090  3A02               	xorlw	2
   634  0091  1D03               	skipz
   635  0092  2A28               	goto	l105
   636  0093  083B               	movf	_packetBuffer+5,w
   637  0094  3A03               	xorlw	3
   638  0095  1D03               	skipz
   639  0096  2A28               	goto	l105
   640                           
   641                           ;main.c: 172: {
   642                           ;main.c: 173: if (packetBuffer[1] == 0)
   643  0097  08B7               	movf	_packetBuffer+1,f
   644  0098  1D03               	skipz
   645  0099  28B3               	goto	l929
   646                           
   647                           ;main.c: 174: {
   648                           ;main.c: 175: x = 0 - 72 - (128 - packetBuffer[2]);
   649  009A  0838               	movf	_packetBuffer+2,w
   650  009B  00A4               	movwf	??_main
   651  009C  01A5               	clrf	??_main+1
   652  009D  09A4               	comf	??_main,f
   653  009E  09A5               	comf	??_main+1,f
   654  009F  0AA4               	incf	??_main,f
   655  00A0  1903               	skipnz
   656  00A1  0AA5               	incf	??_main+1,f
   657  00A2  0824               	movf	??_main,w
   658  00A3  3E80               	addlw	128
   659  00A4  00A6               	movwf	??_main+2
   660  00A5  3000               	movlw	0
   661  00A6  3D25               	addwfc	??_main+1,w
   662  00A7  00A7               	movwf	??_main+3
   663  00A8  09A6               	comf	??_main+2,f
   664  00A9  09A7               	comf	??_main+3,f
   665  00AA  0AA6               	incf	??_main+2,f
   666  00AB  1903               	skipnz
   667  00AC  0AA7               	incf	??_main+3,f
   668  00AD  0826               	movf	??_main+2,w
   669  00AE  3EB8               	addlw	184
   670  00AF  00B2               	movwf	main@x
   671  00B0  30FF               	movlw	255
   672  00B1  3D27               	addwfc	??_main+3,w
   673  00B2  28C8               	goto	L2
   674  00B3                     l929:	
   675                           ;main.c: 176: }
   676                           
   677                           
   678                           ;main.c: 177: else if (packetBuffer[1] == 1)
   679  00B3  0837               	movf	_packetBuffer+1,w
   680  00B4  3A01               	xorlw	1
   681  00B5  1D03               	skipz
   682  00B6  28BE               	goto	l933
   683                           
   684                           ;main.c: 178: {
   685                           ;main.c: 179: x = 0 - 72 + (packetBuffer[2]);
   686  00B7  0838               	movf	_packetBuffer+2,w
   687  00B8  3EB8               	addlw	184
   688  00B9  00B2               	movwf	main@x
   689  00BA  30FF               	movlw	255
   690  00BB  1803               	skipnc
   691  00BC  3000               	movlw	0
   692  00BD  28C8               	goto	L2
   693  00BE                     l933:	
   694                           ;main.c: 180: }
   695                           
   696                           
   697                           ;main.c: 181: else if (packetBuffer[1] == 2)
   698  00BE  0837               	movf	_packetBuffer+1,w
   699  00BF  3A02               	xorlw	2
   700  00C0  1D03               	skipz
   701  00C1  28CA               	goto	l110
   702                           
   703                           ;main.c: 182: {
   704                           ;main.c: 183: x = 56 + packetBuffer[2];
   705  00C2  0838               	movf	_packetBuffer+2,w
   706  00C3  3E38               	addlw	56
   707  00C4  00B2               	movwf	main@x
   708  00C5  3000               	movlw	0
   709  00C6  1803               	skipnc
   710  00C7  3001               	movlw	1
   711  00C8                     L2:	
   712  00C8  00B3               	movwf	main@x+1
   713                           
   714                           ;main.c: 184: }
   715  00C9  28CC               	goto	l937
   716  00CA                     l110:	
   717                           
   718                           ;main.c: 185: else
   719                           ;main.c: 186: {
   720                           ;main.c: 187: packetCorrupt = 1;
   721  00CA  01BE               	clrf	_packetCorrupt
   722  00CB  0ABE               	incf	_packetCorrupt,f
   723  00CC                     l937:	
   724                           
   725                           ;main.c: 188: }
   726                           ;main.c: 190: if (packetBuffer[3] == 0)
   727  00CC  08B9               	movf	_packetBuffer+3,f
   728  00CD  1D03               	skipz
   729  00CE  28E8               	goto	l941
   730                           
   731                           ;main.c: 191: {
   732                           ;main.c: 192: y = 0 - 72 - (128 - packetBuffer[4]);
   733  00CF  083A               	movf	_packetBuffer+4,w
   734  00D0  00A4               	movwf	??_main
   735  00D1  01A5               	clrf	??_main+1
   736  00D2  09A4               	comf	??_main,f
   737  00D3  09A5               	comf	??_main+1,f
   738  00D4  0AA4               	incf	??_main,f
   739  00D5  1903               	skipnz
   740  00D6  0AA5               	incf	??_main+1,f
   741  00D7  0824               	movf	??_main,w
   742  00D8  3E80               	addlw	128
   743  00D9  00A6               	movwf	??_main+2
   744  00DA  3000               	movlw	0
   745  00DB  3D25               	addwfc	??_main+1,w
   746  00DC  00A7               	movwf	??_main+3
   747  00DD  09A6               	comf	??_main+2,f
   748  00DE  09A7               	comf	??_main+3,f
   749  00DF  0AA6               	incf	??_main+2,f
   750  00E0  1903               	skipnz
   751  00E1  0AA7               	incf	??_main+3,f
   752  00E2  0826               	movf	??_main+2,w
   753  00E3  3EB8               	addlw	184
   754  00E4  00B4               	movwf	main@y
   755  00E5  30FF               	movlw	255
   756  00E6  3D27               	addwfc	??_main+3,w
   757  00E7  28FD               	goto	L4
   758  00E8                     l941:	
   759                           ;main.c: 193: }
   760                           
   761                           
   762                           ;main.c: 194: else if (packetBuffer[3] == 1)
   763  00E8  0839               	movf	_packetBuffer+3,w
   764  00E9  3A01               	xorlw	1
   765  00EA  1D03               	skipz
   766  00EB  28F3               	goto	l945
   767                           
   768                           ;main.c: 195: {
   769                           ;main.c: 196: y = 0 - 72 + (packetBuffer[4]);
   770  00EC  083A               	movf	_packetBuffer+4,w
   771  00ED  3EB8               	addlw	184
   772  00EE  00B4               	movwf	main@y
   773  00EF  30FF               	movlw	255
   774  00F0  1803               	skipnc
   775  00F1  3000               	movlw	0
   776  00F2  28FD               	goto	L4
   777  00F3                     l945:	
   778                           ;main.c: 197: }
   779                           
   780                           
   781                           ;main.c: 198: else if (packetBuffer[3] == 2)
   782  00F3  0839               	movf	_packetBuffer+3,w
   783  00F4  3A02               	xorlw	2
   784  00F5  1D03               	skipz
   785  00F6  28FF               	goto	l116
   786                           
   787                           ;main.c: 199: {
   788                           ;main.c: 200: y = 56 + packetBuffer[4];
   789  00F7  083A               	movf	_packetBuffer+4,w
   790  00F8  3E38               	addlw	56
   791  00F9  00B4               	movwf	main@y
   792  00FA  3000               	movlw	0
   793  00FB  1803               	skipnc
   794  00FC  3001               	movlw	1
   795  00FD                     L4:	
   796  00FD  00B5               	movwf	main@y+1
   797                           
   798                           ;main.c: 201: }
   799  00FE  2901               	goto	l949
   800  00FF                     l116:	
   801                           
   802                           ;main.c: 202: else
   803                           ;main.c: 203: {
   804                           ;main.c: 204: packetCorrupt = 1;
   805  00FF  01BE               	clrf	_packetCorrupt
   806  0100  0ABE               	incf	_packetCorrupt,f
   807  0101                     l949:	
   808                           
   809                           ;main.c: 205: }
   810                           ;main.c: 207: xAbs = x > 0 ? x : -x;
   811  0101  0833               	movf	main@x+1,w
   812  0102  3A80               	xorlw	128
   813  0103  00FF               	movwf	127
   814  0104  3080               	movlw	128
   815  0105  027F               	subwf	127,w
   816  0106  1D03               	skipz
   817  0107  290A               	goto	u595
   818  0108  3001               	movlw	1
   819  0109  0232               	subwf	main@x,w
   820  010A                     u595:	
   821  010A  1803               	skipnc
   822  010B  2919               	goto	l953
   823  010C  0020               	movlb	0	; select bank0
   824  010D  0932               	comf	main@x,w
   825  010E  00A4               	movwf	??_main
   826  010F  0933               	comf	main@x+1,w
   827  0110  00A5               	movwf	??_main+1
   828  0111  0AA4               	incf	??_main,f
   829  0112  1903               	skipnz
   830  0113  0AA5               	incf	??_main+1,f
   831  0114  0824               	movf	??_main,w
   832  0115  00AE               	movwf	main@xAbs
   833  0116  0825               	movf	??_main+1,w
   834  0117  00AF               	movwf	main@xAbs+1
   835  0118  2920               	goto	l955
   836  0119                     l953:	
   837  0119  0020               	movlb	0	; select bank0
   838  011A  0833               	movf	main@x+1,w
   839  011B  01AF               	clrf	main@xAbs+1
   840  011C  07AF               	addwf	main@xAbs+1,f
   841  011D  0832               	movf	main@x,w
   842  011E  01AE               	clrf	main@xAbs
   843  011F  07AE               	addwf	main@xAbs,f
   844  0120                     l955:	
   845                           
   846                           ;main.c: 208: yAbs = y > 0 ? y : -y;
   847  0120  0835               	movf	main@y+1,w
   848  0121  3A80               	xorlw	128
   849  0122  00FF               	movwf	127
   850  0123  3080               	movlw	128
   851  0124  027F               	subwf	127,w
   852  0125  1D03               	skipz
   853  0126  2929               	goto	u605
   854  0127  3001               	movlw	1
   855  0128  0234               	subwf	main@y,w
   856  0129                     u605:	
   857  0129  1803               	skipnc
   858  012A  2938               	goto	l959
   859  012B  0020               	movlb	0	; select bank0
   860  012C  0934               	comf	main@y,w
   861  012D  00A4               	movwf	??_main
   862  012E  0935               	comf	main@y+1,w
   863  012F  00A5               	movwf	??_main+1
   864  0130  0AA4               	incf	??_main,f
   865  0131  1903               	skipnz
   866  0132  0AA5               	incf	??_main+1,f
   867  0133  0824               	movf	??_main,w
   868  0134  00B0               	movwf	main@yAbs
   869  0135  0825               	movf	??_main+1,w
   870  0136  00B1               	movwf	main@yAbs+1
   871  0137  293F               	goto	l125
   872  0138                     l959:	
   873  0138  0020               	movlb	0	; select bank0
   874  0139  0835               	movf	main@y+1,w
   875  013A  01B1               	clrf	main@yAbs+1
   876  013B  07B1               	addwf	main@yAbs+1,f
   877  013C  0834               	movf	main@y,w
   878  013D  01B0               	clrf	main@yAbs
   879  013E  07B0               	addwf	main@yAbs,f
   880  013F                     l125:	
   881                           
   882                           ;main.c: 210: if (x < (-y))
   883  013F  0934               	comf	main@y,w
   884  0140  00A4               	movwf	??_main
   885  0141  0935               	comf	main@y+1,w
   886  0142  00A5               	movwf	??_main+1
   887  0143  0AA4               	incf	??_main,f
   888  0144  1903               	skipnz
   889  0145  0AA5               	incf	??_main+1,f
   890  0146  0833               	movf	main@x+1,w
   891  0147  3A80               	xorlw	128
   892  0148  00A6               	movwf	??_main+2
   893  0149  0825               	movf	??_main+1,w
   894  014A  3A80               	xorlw	128
   895  014B  0226               	subwf	??_main+2,w
   896  014C  1D03               	skipz
   897  014D  2950               	goto	u615
   898  014E  0824               	movf	??_main,w
   899  014F  0232               	subwf	main@x,w
   900  0150                     u615:	
   901  0150  1803               	skipnc
   902  0151  2966               	goto	l126
   903                           
   904                           ;main.c: 211: {
   905                           ;main.c: 212: leftDir = 0;
   906  0152  0020               	movlb	0	; select bank0
   907  0153  01C2               	clrf	_leftDir
   908                           
   909                           ;main.c: 213: if (x < 0)
   910  0154  1FB3               	btfss	main@x+1,7
   911  0155  2962               	goto	l967
   912                           
   913                           ;main.c: 214: {
   914                           ;main.c: 215: leftPWMtemp = xAbs - y;
   915  0156  0934               	comf	main@y,w
   916  0157  00A4               	movwf	??_main
   917  0158  0935               	comf	main@y+1,w
   918  0159  00A5               	movwf	??_main+1
   919  015A  0AA4               	incf	??_main,f
   920  015B  1903               	skipnz
   921  015C  0AA5               	incf	??_main+1,f
   922  015D  082E               	movf	main@xAbs,w
   923  015E  0724               	addwf	??_main,w
   924  015F  00A8               	movwf	main@leftPWMtemp
   925  0160  082F               	movf	main@xAbs+1,w
   926  0161  2976               	goto	L6
   927  0162                     l967:	
   928                           ;main.c: 216: }
   929                           
   930                           
   931                           ;main.c: 217: else
   932                           ;main.c: 218: {
   933                           ;main.c: 219: leftPWMtemp = yAbs - x;
   934  0162  0932               	comf	main@x,w
   935  0163  00A4               	movwf	??_main
   936  0164  0933               	comf	main@x+1,w
   937  0165  296E               	goto	L11
   938  0166                     l126:	
   939                           ;main.c: 220: }
   940                           ;main.c: 221: }
   941                           
   942                           
   943                           ;main.c: 222: else
   944                           ;main.c: 223: {
   945                           ;main.c: 224: leftDir = 1;
   946  0166  0020               	movlb	0	; select bank0
   947  0167  01C2               	clrf	_leftDir
   948  0168  0AC2               	incf	_leftDir,f
   949                           
   950                           ;main.c: 225: if (x < 0)
   951  0169  1FB3               	btfss	main@x+1,7
   952  016A  2978               	goto	l971
   953                           
   954                           ;main.c: 226: {
   955                           ;main.c: 227: leftPWMtemp = yAbs - xAbs;
   956  016B  092E               	comf	main@xAbs,w
   957  016C  00A4               	movwf	??_main
   958  016D  092F               	comf	main@xAbs+1,w
   959  016E                     L11:	
   960  016E  00A5               	movwf	??_main+1
   961  016F  0AA4               	incf	??_main,f
   962  0170  1903               	skipnz
   963  0171  0AA5               	incf	??_main+1,f
   964  0172  0830               	movf	main@yAbs,w
   965  0173  0724               	addwf	??_main,w
   966  0174  00A8               	movwf	main@leftPWMtemp
   967  0175  0831               	movf	main@yAbs+1,w
   968  0176                     L6:	
   969  0176  3D25               	addwfc	??_main+1,w
   970  0177  297D               	goto	L7
   971  0178                     l971:	
   972                           ;main.c: 228: }
   973                           
   974                           
   975                           ;main.c: 229: else
   976                           ;main.c: 230: {
   977                           ;main.c: 231: leftPWMtemp = x + y;
   978  0178  0834               	movf	main@y,w
   979  0179  0732               	addwf	main@x,w
   980  017A  00A8               	movwf	main@leftPWMtemp
   981  017B  0835               	movf	main@y+1,w
   982  017C  3D33               	addwfc	main@x+1,w
   983  017D                     L7:	
   984  017D  00A9               	movwf	main@leftPWMtemp+1
   985                           
   986                           ;main.c: 232: }
   987                           ;main.c: 233: }
   988                           ;main.c: 235: if (y > x)
   989  017E  0833               	movf	main@x+1,w
   990  017F  3A80               	xorlw	128
   991  0180  00A4               	movwf	??_main
   992  0181  0835               	movf	main@y+1,w
   993  0182  3A80               	xorlw	128
   994  0183  0224               	subwf	??_main,w
   995  0184  1D03               	skipz
   996  0185  2988               	goto	u645
   997  0186  0834               	movf	main@y,w
   998  0187  0232               	subwf	main@x,w
   999  0188                     u645:	
  1000  0188  1803               	skipnc
  1001  0189  29AA               	goto	l983
  1002                           
  1003                           ;main.c: 236: {
  1004                           ;main.c: 237: rightDir = 1;
  1005  018A  0020               	movlb	0	; select bank0
  1006  018B  01C3               	clrf	_rightDir
  1007  018C  0AC3               	incf	_rightDir,f
  1008                           
  1009                           ;main.c: 238: if (y > 0)
  1010  018D  0835               	movf	main@y+1,w
  1011  018E  3A80               	xorlw	128
  1012  018F  00FF               	movwf	127
  1013  0190  3080               	movlw	128
  1014  0191  027F               	subwf	127,w
  1015  0192  1D03               	skipz
  1016  0193  2996               	goto	u655
  1017  0194  3001               	movlw	1
  1018  0195  0234               	subwf	main@y,w
  1019  0196                     u655:	
  1020  0196  1C03               	skipc
  1021  0197  29A5               	goto	l981
  1022                           
  1023                           ;main.c: 239: {
  1024                           ;main.c: 240: rightPWMtemp = y - x;
  1025  0198  0020               	movlb	0	; select bank0
  1026  0199  0932               	comf	main@x,w
  1027  019A  00A4               	movwf	??_main
  1028  019B  0933               	comf	main@x+1,w
  1029  019C  00A5               	movwf	??_main+1
  1030  019D  0AA4               	incf	??_main,f
  1031  019E  1903               	skipnz
  1032  019F  0AA5               	incf	??_main+1,f
  1033  01A0  0834               	movf	main@y,w
  1034  01A1  0724               	addwf	??_main,w
  1035  01A2  00AA               	movwf	main@rightPWMtemp
  1036  01A3  0835               	movf	main@y+1,w
  1037  01A4  29C3               	goto	L9
  1038  01A5                     l981:	
  1039                           ;main.c: 241: }
  1040                           
  1041                           
  1042                           ;main.c: 242: else
  1043                           ;main.c: 243: {
  1044                           ;main.c: 244: rightPWMtemp = xAbs - yAbs;
  1045  01A5  0020               	movlb	0	; select bank0
  1046  01A6  0930               	comf	main@yAbs,w
  1047  01A7  00A4               	movwf	??_main
  1048  01A8  0931               	comf	main@yAbs+1,w
  1049  01A9  29BB               	goto	L12
  1050  01AA                     l983:	
  1051                           ;main.c: 245: }
  1052                           ;main.c: 246: }
  1053                           
  1054                           
  1055                           ;main.c: 247: else
  1056                           ;main.c: 248: {
  1057                           ;main.c: 249: rightDir = 0;
  1058  01AA  0020               	movlb	0	; select bank0
  1059  01AB  01C3               	clrf	_rightDir
  1060                           
  1061                           ;main.c: 250: if (y > 0)
  1062  01AC  0835               	movf	main@y+1,w
  1063  01AD  3A80               	xorlw	128
  1064  01AE  00FF               	movwf	127
  1065  01AF  3080               	movlw	128
  1066  01B0  027F               	subwf	127,w
  1067  01B1  1D03               	skipz
  1068  01B2  29B5               	goto	u665
  1069  01B3  3001               	movlw	1
  1070  01B4  0234               	subwf	main@y,w
  1071  01B5                     u665:	
  1072  01B5  1C03               	skipc
  1073  01B6  29C5               	goto	l989
  1074                           
  1075                           ;main.c: 251: {
  1076                           ;main.c: 252: rightPWMtemp = xAbs - y;
  1077  01B7  0020               	movlb	0	; select bank0
  1078  01B8  0934               	comf	main@y,w
  1079  01B9  00A4               	movwf	??_main
  1080  01BA  0935               	comf	main@y+1,w
  1081  01BB                     L12:	
  1082  01BB  00A5               	movwf	??_main+1
  1083  01BC  0AA4               	incf	??_main,f
  1084  01BD  1903               	skipnz
  1085  01BE  0AA5               	incf	??_main+1,f
  1086  01BF  082E               	movf	main@xAbs,w
  1087  01C0  0724               	addwf	??_main,w
  1088  01C1  00AA               	movwf	main@rightPWMtemp
  1089  01C2  082F               	movf	main@xAbs+1,w
  1090  01C3                     L9:	
  1091  01C3  3D25               	addwfc	??_main+1,w
  1092  01C4  29CB               	goto	L10
  1093  01C5                     l989:	
  1094                           ;main.c: 253: }
  1095                           
  1096                           
  1097                           ;main.c: 254: else
  1098                           ;main.c: 255: {
  1099                           ;main.c: 256: rightPWMtemp = yAbs + x;
  1100  01C5  0020               	movlb	0	; select bank0
  1101  01C6  0832               	movf	main@x,w
  1102  01C7  0730               	addwf	main@yAbs,w
  1103  01C8  00AA               	movwf	main@rightPWMtemp
  1104  01C9  0833               	movf	main@x+1,w
  1105  01CA  3D31               	addwfc	main@yAbs+1,w
  1106  01CB                     L10:	
  1107  01CB  00AB               	movwf	main@rightPWMtemp+1
  1108                           
  1109                           ;main.c: 257: }
  1110                           ;main.c: 258: }
  1111                           ;main.c: 259: if (leftPWMtemp > 100)
  1112  01CC  0829               	movf	main@leftPWMtemp+1,w
  1113  01CD  3A80               	xorlw	128
  1114  01CE  00FF               	movwf	127
  1115  01CF  3080               	movlw	128
  1116  01D0  027F               	subwf	127,w
  1117  01D1  1D03               	skipz
  1118  01D2  29D5               	goto	u675
  1119  01D3  3065               	movlw	101
  1120  01D4  0228               	subwf	main@leftPWMtemp,w
  1121  01D5                     u675:	
  1122  01D5  1C03               	skipc
  1123  01D6  29DC               	goto	l995
  1124                           
  1125                           ;main.c: 260: {
  1126                           ;main.c: 261: leftPWMtemp = 100;
  1127  01D7  3064               	movlw	100
  1128  01D8  0020               	movlb	0	; select bank0
  1129  01D9  00A8               	movwf	main@leftPWMtemp
  1130  01DA  3000               	movlw	0
  1131  01DB  00A9               	movwf	main@leftPWMtemp+1
  1132  01DC                     l995:	
  1133                           
  1134                           ;main.c: 262: }
  1135                           ;main.c: 263: if (rightPWMtemp > 100)
  1136  01DC  0020               	movlb	0	; select bank0
  1137  01DD  082B               	movf	main@rightPWMtemp+1,w
  1138  01DE  3A80               	xorlw	128
  1139  01DF  00FF               	movwf	127
  1140  01E0  3080               	movlw	128
  1141  01E1  027F               	subwf	127,w
  1142  01E2  1D03               	skipz
  1143  01E3  29E6               	goto	u685
  1144  01E4  3065               	movlw	101
  1145  01E5  022A               	subwf	main@rightPWMtemp,w
  1146  01E6                     u685:	
  1147  01E6  1C03               	skipc
  1148  01E7  29ED               	goto	l999
  1149                           
  1150                           ;main.c: 264: {
  1151                           ;main.c: 265: rightPWMtemp = 100;
  1152  01E8  3064               	movlw	100
  1153  01E9  0020               	movlb	0	; select bank0
  1154  01EA  00AA               	movwf	main@rightPWMtemp
  1155  01EB  3000               	movlw	0
  1156  01EC  00AB               	movwf	main@rightPWMtemp+1
  1157  01ED                     l999:	
  1158                           
  1159                           ;main.c: 266: }
  1160                           ;main.c: 268: leftPWM = leftPWMtemp / 12;
  1161  01ED  300C               	movlw	12
  1162  01EE  00F3               	movwf	?___awdiv
  1163  01EF  3000               	movlw	0
  1164  01F0  00F4               	movwf	?___awdiv+1
  1165  01F1  0020               	movlb	0	; select bank0
  1166  01F2  0829               	movf	main@leftPWMtemp+1,w
  1167  01F3  01F6               	clrf	?___awdiv+3
  1168  01F4  07F6               	addwf	?___awdiv+3,f
  1169  01F5  0828               	movf	main@leftPWMtemp,w
  1170  01F6  01F5               	clrf	?___awdiv+2
  1171  01F7  07F5               	addwf	?___awdiv+2,f
  1172  01F8  3182  226A  3180   	fcall	___awdiv
  1173  01FB  0873               	movf	?___awdiv,w
  1174  01FC  0020               	movlb	0	; select bank0
  1175  01FD  00A4               	movwf	??_main
  1176  01FE  0824               	movf	??_main,w
  1177  01FF  00BD               	movwf	_leftPWM
  1178                           
  1179                           ;main.c: 269: rightPWM = rightPWMtemp / 12;
  1180  0200  300C               	movlw	12
  1181  0201  00F3               	movwf	?___awdiv
  1182  0202  3000               	movlw	0
  1183  0203  00F4               	movwf	?___awdiv+1
  1184  0204  082B               	movf	main@rightPWMtemp+1,w
  1185  0205  01F6               	clrf	?___awdiv+3
  1186  0206  07F6               	addwf	?___awdiv+3,f
  1187  0207  082A               	movf	main@rightPWMtemp,w
  1188  0208  01F5               	clrf	?___awdiv+2
  1189  0209  07F5               	addwf	?___awdiv+2,f
  1190  020A  3182  226A  3180   	fcall	___awdiv
  1191  020D  0873               	movf	?___awdiv,w
  1192  020E  0020               	movlb	0	; select bank0
  1193  020F  00A4               	movwf	??_main
  1194  0210  0824               	movf	??_main,w
  1195  0211  00C0               	movwf	_rightPWM
  1196                           
  1197                           ;main.c: 271: if (leftDir)
  1198  0212  0842               	movf	_leftDir,w
  1199  0213  1903               	btfsc	3,2
  1200  0214  2A19               	goto	l140
  1201                           
  1202                           ;main.c: 272: {
  1203                           ;main.c: 274: LATCbits.LATC0 = 0;
  1204  0215  0022               	movlb	2	; select bank2
  1205  0216  100E               	bcf	14,0	;volatile
  1206                           
  1207                           ;main.c: 275: LATCbits.LATC1 = 1;
  1208  0217  148E               	bsf	14,1	;volatile
  1209                           
  1210                           ;main.c: 276: }
  1211  0218  2A1C               	goto	l1005
  1212  0219                     l140:	
  1213                           
  1214                           ;main.c: 277: else
  1215                           ;main.c: 278: {
  1216                           ;main.c: 279: LATCbits.LATC0 = 1;
  1217  0219  0022               	movlb	2	; select bank2
  1218  021A  140E               	bsf	14,0	;volatile
  1219                           
  1220                           ;main.c: 280: LATCbits.LATC1 = 0;
  1221  021B  108E               	bcf	14,1	;volatile
  1222  021C                     l1005:	
  1223                           
  1224                           ;main.c: 281: }
  1225                           ;main.c: 282: if (rightDir)
  1226  021C  0020               	movlb	0	; select bank0
  1227  021D  0843               	movf	_rightDir,w
  1228  021E  1903               	btfsc	3,2
  1229  021F  2A24               	goto	l142
  1230                           
  1231                           ;main.c: 283: {
  1232                           ;main.c: 285: LATCbits.LATC2 = 0;
  1233  0220  0022               	movlb	2	; select bank2
  1234  0221  110E               	bcf	14,2	;volatile
  1235                           
  1236                           ;main.c: 286: LATCbits.LATC3 = 1;
  1237  0222  158E               	bsf	14,3	;volatile
  1238                           
  1239                           ;main.c: 287: }
  1240  0223  2A2A               	goto	l1009
  1241  0224                     l142:	
  1242                           
  1243                           ;main.c: 288: else
  1244                           ;main.c: 289: {
  1245                           ;main.c: 290: LATCbits.LATC2 = 1;
  1246  0224  0022               	movlb	2	; select bank2
  1247  0225  150E               	bsf	14,2	;volatile
  1248                           
  1249                           ;main.c: 291: LATCbits.LATC3 = 0;
  1250  0226  118E               	bcf	14,3	;volatile
  1251                           
  1252                           ;main.c: 292: }
  1253                           ;main.c: 293: }
  1254  0227  2A2A               	goto	l1009
  1255  0228                     l105:	
  1256                           
  1257                           ;main.c: 294: else
  1258                           ;main.c: 295: {
  1259                           ;main.c: 297: packetCorrupt = 1;
  1260  0228  01BE               	clrf	_packetCorrupt
  1261  0229  0ABE               	incf	_packetCorrupt,f
  1262  022A                     l1009:	
  1263                           
  1264                           ;main.c: 298: }
  1265                           ;main.c: 299: packetReceived = 0;
  1266  022A  0020               	movlb	0	; select bank0
  1267  022B  01BF               	clrf	_packetReceived
  1268  022C                     l1011:	
  1269                           
  1270                           ;main.c: 300: }
  1271                           ;main.c: 301: if (pwmCount > leftPWM)
  1272  022C  082D               	movf	main@pwmCount+1,w
  1273  022D  3A80               	xorlw	128
  1274  022E  3C80               	sublw	128
  1275  022F  1D03               	skipz
  1276  0230  2A33               	goto	u715
  1277  0231  082C               	movf	main@pwmCount,w
  1278  0232  023D               	subwf	_leftPWM,w
  1279  0233                     u715:	
  1280  0233  1803               	skipnc
  1281  0234  2A38               	goto	l1015
  1282                           
  1283                           ;main.c: 302: {
  1284                           ;main.c: 303: LATCbits.LATC4 = 0;
  1285  0235  0022               	movlb	2	; select bank2
  1286  0236  120E               	bcf	14,4	;volatile
  1287                           
  1288                           ;main.c: 304: }
  1289  0237  2A3F               	goto	l1019
  1290  0238                     l1015:	
  1291                           
  1292                           ;main.c: 305: else if (leftPWM > 0)
  1293  0238  0020               	movlb	0	; select bank0
  1294  0239  083D               	movf	_leftPWM,w
  1295  023A  1903               	btfsc	3,2
  1296  023B  2A3F               	goto	l1019
  1297                           
  1298                           ;main.c: 306: {
  1299                           ;main.c: 307: LATCbits.LATC4 = 1;
  1300  023C  0022               	movlb	2	; select bank2
  1301  023D  160E               	bsf	14,4	;volatile
  1302  023E  0020               	movlb	0	; select bank0
  1303  023F                     l1019:	
  1304                           
  1305                           ;main.c: 308: }
  1306                           ;main.c: 309: if (pwmCount > rightPWM)
  1307  023F  0020               	movlb	0	; select bank0
  1308  0240  082D               	movf	main@pwmCount+1,w
  1309  0241  3A80               	xorlw	128
  1310  0242  3C80               	sublw	128
  1311  0243  1D03               	skipz
  1312  0244  2A47               	goto	u735
  1313  0245  082C               	movf	main@pwmCount,w
  1314  0246  0240               	subwf	_rightPWM,w
  1315  0247                     u735:	
  1316  0247  1803               	skipnc
  1317  0248  2A4C               	goto	l1023
  1318                           
  1319                           ;main.c: 310: {
  1320                           ;main.c: 311: LATAbits.LATA5 = 0;
  1321  0249  0022               	movlb	2	; select bank2
  1322  024A  128C               	bcf	12,5	;volatile
  1323                           
  1324                           ;main.c: 312: }
  1325  024B  2A53               	goto	l1027
  1326  024C                     l1023:	
  1327                           
  1328                           ;main.c: 313: else if (rightPWM > 0)
  1329  024C  0020               	movlb	0	; select bank0
  1330  024D  0840               	movf	_rightPWM,w
  1331  024E  1903               	btfsc	3,2
  1332  024F  2A53               	goto	l1027
  1333                           
  1334                           ;main.c: 314: {
  1335                           ;main.c: 315: LATAbits.LATA5 = 1;
  1336  0250  0022               	movlb	2	; select bank2
  1337  0251  168C               	bsf	12,5	;volatile
  1338  0252  0020               	movlb	0	; select bank0
  1339  0253                     l1027:	
  1340                           
  1341                           ;main.c: 316: }
  1342                           ;main.c: 317: pwmCount++;
  1343  0253  3001               	movlw	1
  1344  0254  0020               	movlb	0	; select bank0
  1345  0255  07AC               	addwf	main@pwmCount,f
  1346  0256  3000               	movlw	0
  1347  0257  3DAD               	addwfc	main@pwmCount+1,f
  1348                           
  1349                           ;main.c: 318: if (pwmCount > SPEED_INCREMENTS)
  1350  0258  30F9               	movlw	low (_SPEED_INCREMENTS| (0+32768))
  1351  0259  3182               	movlp	high __stringtab
  1352  025A  000A               	callw
  1353  025B  3180               	pagesel	$	;select current page
  1354  025C  00A4               	movwf	??_main
  1355  025D  082D               	movf	main@pwmCount+1,w
  1356  025E  3A80               	xorlw	128
  1357  025F  3C80               	sublw	128
  1358  0260  1D03               	skipz
  1359  0261  2A64               	goto	u755
  1360  0262  082C               	movf	main@pwmCount,w
  1361  0263  0224               	subwf	??_main,w
  1362  0264                     u755:	
  1363  0264  1803               	skipnc
  1364  0265  287B               	goto	l911
  1365                           
  1366                           ;main.c: 319: {
  1367                           ;main.c: 320: pwmCount = 0;
  1368  0266  0020               	movlb	0	; select bank0
  1369  0267  01AC               	clrf	main@pwmCount
  1370  0268  01AD               	clrf	main@pwmCount+1
  1371  0269  287B               	goto	l911
  1372  026A                     __end_of_main:	
  1373                           
  1374                           	psect	text1
  1375  026A                     __ptext1:	
  1376 ;; *************** function ___awdiv *****************
  1377 ;; Defined at:
  1378 ;;		line 5 in file "/Applications/microchip/xc8/v1.21/sources/pic/awdiv.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  divisor         2    3[COMMON] int 
  1381 ;;  dividend        2    5[COMMON] int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  quotient        2    2[BANK0 ] int 
  1384 ;;  sign            1    1[BANK0 ] unsigned char 
  1385 ;;  counter         1    0[BANK0 ] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  2    3[COMMON] int 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1398 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1399 ;;Total ram usage:        9 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    2
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function ___awdiv
  1411  026A                     ___awdiv:	
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1415  026A  0020               	movlb	0	; select bank0
  1416  026B  01A1               	clrf	___awdiv@sign
  1417  026C  1FF4               	btfss	___awdiv@divisor+1,7
  1418  026D  2A75               	goto	l1043
  1419  026E  09F3               	comf	___awdiv@divisor,f
  1420  026F  09F4               	comf	___awdiv@divisor+1,f
  1421  0270  0AF3               	incf	___awdiv@divisor,f
  1422  0271  1903               	skipnz
  1423  0272  0AF4               	incf	___awdiv@divisor+1,f
  1424  0273  01A1               	clrf	___awdiv@sign
  1425  0274  0AA1               	incf	___awdiv@sign,f
  1426  0275                     l1043:	
  1427  0275  1FF6               	btfss	___awdiv@dividend+1,7
  1428  0276  2A80               	goto	l1049
  1429  0277  09F5               	comf	___awdiv@dividend,f
  1430  0278  09F6               	comf	___awdiv@dividend+1,f
  1431  0279  0AF5               	incf	___awdiv@dividend,f
  1432  027A  1903               	skipnz
  1433  027B  0AF6               	incf	___awdiv@dividend+1,f
  1434  027C  3001               	movlw	1
  1435  027D  00F7               	movwf	??___awdiv
  1436  027E  0877               	movf	??___awdiv,w
  1437  027F  06A1               	xorwf	___awdiv@sign,f
  1438  0280                     l1049:	
  1439  0280  01A2               	clrf	___awdiv@quotient
  1440  0281  01A3               	clrf	___awdiv@quotient+1
  1441  0282  0874               	movf	___awdiv@divisor+1,w
  1442  0283  0473               	iorwf	___awdiv@divisor,w
  1443  0284  1903               	skipnz
  1444  0285  2AAF               	goto	l1071
  1445  0286  01A0               	clrf	___awdiv@counter
  1446  0287  0AA0               	incf	___awdiv@counter,f
  1447  0288                     l1059:	
  1448  0288  1BF4               	btfsc	___awdiv@divisor+1,7
  1449  0289  2A94               	goto	l1061
  1450  028A  3001               	movlw	1
  1451  028B                     u795:	
  1452  028B  35F3               	lslf	___awdiv@divisor,f
  1453  028C  0DF4               	rlf	___awdiv@divisor+1,f
  1454  028D  0B89               	decfsz	9,f
  1455  028E  2A8B               	goto	u795
  1456  028F  3001               	movlw	1
  1457  0290  00F7               	movwf	??___awdiv
  1458  0291  0877               	movf	??___awdiv,w
  1459  0292  07A0               	addwf	___awdiv@counter,f
  1460  0293  2A88               	goto	l1059
  1461  0294                     l1061:	
  1462  0294  3001               	movlw	1
  1463  0295                     u815:	
  1464  0295  35A2               	lslf	___awdiv@quotient,f
  1465  0296  0DA3               	rlf	___awdiv@quotient+1,f
  1466  0297  0B89               	decfsz	9,f
  1467  0298  2A95               	goto	u815
  1468  0299  0874               	movf	___awdiv@divisor+1,w
  1469  029A  0276               	subwf	___awdiv@dividend+1,w
  1470  029B  1D03               	skipz
  1471  029C  2A9F               	goto	u825
  1472  029D  0873               	movf	___awdiv@divisor,w
  1473  029E  0275               	subwf	___awdiv@dividend,w
  1474  029F                     u825:	
  1475  029F  1C03               	skipc
  1476  02A0  2AA6               	goto	l1067
  1477  02A1  0873               	movf	___awdiv@divisor,w
  1478  02A2  02F5               	subwf	___awdiv@dividend,f
  1479  02A3  0874               	movf	___awdiv@divisor+1,w
  1480  02A4  3BF6               	subwfb	___awdiv@dividend+1,f
  1481  02A5  1422               	bsf	___awdiv@quotient,0
  1482  02A6                     l1067:	
  1483  02A6  3001               	movlw	1
  1484  02A7                     u835:	
  1485  02A7  36F4               	lsrf	___awdiv@divisor+1,f
  1486  02A8  0CF3               	rrf	___awdiv@divisor,f
  1487  02A9  0B89               	decfsz	9,f
  1488  02AA  2AA7               	goto	u835
  1489  02AB  3001               	movlw	1
  1490  02AC  02A0               	subwf	___awdiv@counter,f
  1491  02AD  1D03               	btfss	3,2
  1492  02AE  2A94               	goto	l1061
  1493  02AF                     l1071:	
  1494  02AF  0821               	movf	___awdiv@sign,w
  1495  02B0  1903               	btfsc	3,2
  1496  02B1  2AB7               	goto	l1075
  1497  02B2  09A2               	comf	___awdiv@quotient,f
  1498  02B3  09A3               	comf	___awdiv@quotient+1,f
  1499  02B4  0AA2               	incf	___awdiv@quotient,f
  1500  02B5  1903               	skipnz
  1501  02B6  0AA3               	incf	___awdiv@quotient+1,f
  1502  02B7                     l1075:	
  1503  02B7  0823               	movf	___awdiv@quotient+1,w
  1504  02B8  01F4               	clrf	?___awdiv+1
  1505  02B9  07F4               	addwf	?___awdiv+1,f
  1506  02BA  0822               	movf	___awdiv@quotient,w
  1507  02BB  01F3               	clrf	?___awdiv
  1508  02BC  07F3               	addwf	?___awdiv,f
  1509  02BD  0008               	return
  1510  02BE                     __end_of___awdiv:	
  1511                           
  1512                           	psect	text2
  1513  02EA                     __ptext2:	
  1514 ;; *************** function _checkBatteryVoltage *****************
  1515 ;; Defined at:
  1516 ;;		line 139 in file "main.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;		None
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;		None
  1521 ;; Return value:  Size  Location     Type
  1522 ;;		None               void
  1523 ;; Registers used:
  1524 ;;		status,2
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1534 ;;Total ram usage:        0 bytes
  1535 ;; Hardware stack levels used:    1
  1536 ;; Hardware stack levels required when called:    2
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           
  1545                           ;psect for function _checkBatteryVoltage
  1546  02EA                     _checkBatteryVoltage:	
  1547                           
  1548                           ;main.c: 140: checkBattery = 0;
  1549                           
  1550                           ;incstack = 0
  1551                           ; Regs used in _checkBatteryVoltage: [status,2]
  1552  02EA  0020               	movlb	0	; select bank0
  1553  02EB  01C1               	clrf	_checkBattery
  1554                           
  1555                           ;main.c: 141: ADON = 1;
  1556  02EC  0021               	movlb	1	; select bank1
  1557  02ED  141D               	bsf	29,0	;volatile
  1558                           
  1559                           ;main.c: 143: ADGO = 1;
  1560  02EE  149D               	bsf	29,1	;volatile
  1561  02EF  0008               	return
  1562  02F0                     __end_of_checkBatteryVoltage:	
  1563                           
  1564                           	psect	text3
  1565  02BE                     __ptext3:	
  1566 ;; *************** function _setup *****************
  1567 ;; Defined at:
  1568 ;;		line 98 in file "main.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;		None
  1571 ;; Auto vars:     Size  Location     Type
  1572 ;;		None
  1573 ;; Return value:  Size  Location     Type
  1574 ;;		None               void
  1575 ;; Registers used:
  1576 ;;		wreg, status,2, status,0
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1586 ;;Total ram usage:        0 bytes
  1587 ;; Hardware stack levels used:    1
  1588 ;; Hardware stack levels required when called:    2
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_main
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596                           
  1597                           ;psect for function _setup
  1598  02BE                     _setup:	
  1599                           
  1600                           ;main.c: 100: OSCCONbits.IRCF = 0b1111;
  1601                           
  1602                           ;incstack = 0
  1603                           ; Regs used in _setup: [wreg+status,2+status,0]
  1604  02BE  303C               	movlw	60
  1605  02BF  0021               	movlb	1	; select bank1
  1606  02C0  0499               	iorwf	25,f	;volatile
  1607                           
  1608                           ;main.c: 103: TRISC5 = 1; TRISC4 = 1; SPBRG = ((int)(16000000L/(16UL * 9600) -1)); RCSTA
      +                           = (0|0x90); TXSTA = (0x4|0|0x20);
  1609  02C1  168E               	bsf	14,5	;volatile
  1610  02C2  160E               	bsf	14,4	;volatile
  1611  02C3  3000               	movlw	0
  1612  02C4  0023               	movlb	3	; select bank3
  1613  02C5  009C               	movwf	28	;volatile
  1614  02C6  3067               	movlw	103
  1615  02C7  009B               	movwf	27	;volatile
  1616  02C8  3090               	movlw	144
  1617  02C9  009D               	movwf	29	;volatile
  1618  02CA  3024               	movlw	36
  1619  02CB  009E               	movwf	30	;volatile
  1620                           
  1621                           ;main.c: 106: TRISAbits.TRISA4 = 1;
  1622  02CC  0021               	movlb	1	; select bank1
  1623  02CD  160C               	bsf	12,4	;volatile
  1624                           
  1625                           ;main.c: 107: TRISAbits.TRISA5 = 0;
  1626  02CE  128C               	bcf	12,5	;volatile
  1627                           
  1628                           ;main.c: 108: TRISCbits.TRISC0 = 0;
  1629  02CF  100E               	bcf	14,0	;volatile
  1630                           
  1631                           ;main.c: 109: TRISCbits.TRISC1 = 0;
  1632  02D0  108E               	bcf	14,1	;volatile
  1633                           
  1634                           ;main.c: 110: TRISCbits.TRISC2 = 0;
  1635  02D1  110E               	bcf	14,2	;volatile
  1636                           
  1637                           ;main.c: 111: TRISCbits.TRISC3 = 0;
  1638  02D2  118E               	bcf	14,3	;volatile
  1639                           
  1640                           ;main.c: 112: TRISCbits.TRISC4 = 0;
  1641  02D3  120E               	bcf	14,4	;volatile
  1642                           
  1643                           ;main.c: 113: TRISCbits.TRISC5 = 1;
  1644  02D4  168E               	bsf	14,5	;volatile
  1645                           
  1646                           ;main.c: 116: ANSELC = 0x00;
  1647  02D5  0023               	movlb	3	; select bank3
  1648  02D6  018E               	clrf	14	;volatile
  1649                           
  1650                           ;main.c: 117: ANSELA = 0x00;
  1651  02D7  018C               	clrf	12	;volatile
  1652                           
  1653                           ;main.c: 118: ANSELAbits.ANSA4 = 1;
  1654  02D8  160C               	bsf	12,4	;volatile
  1655                           
  1656                           ;main.c: 121: LATC = 0x00;
  1657  02D9  0022               	movlb	2	; select bank2
  1658  02DA  018E               	clrf	14	;volatile
  1659                           
  1660                           ;main.c: 122: LATA = 0x00;
  1661  02DB  018C               	clrf	12	;volatile
  1662                           
  1663                           ;main.c: 125: ADCON0bits.CHS = 0b00011;
  1664  02DC  0021               	movlb	1	; select bank1
  1665  02DD  081D               	movf	29,w	;volatile
  1666  02DE  3983               	andlw	-125
  1667  02DF  380C               	iorlw	12
  1668  02E0  009D               	movwf	29	;volatile
  1669                           
  1670                           ;main.c: 126: ADCON1bits.ADCS = 0b101;
  1671  02E1  081E               	movf	30,w	;volatile
  1672  02E2  398F               	andlw	-113
  1673  02E3  3850               	iorlw	80
  1674  02E4  009E               	movwf	30	;volatile
  1675                           
  1676                           ;main.c: 130: RCIE = 1;
  1677  02E5  1691               	bsf	17,5	;volatile
  1678                           
  1679                           ;main.c: 131: ADIE = 1;
  1680  02E6  1711               	bsf	17,6	;volatile
  1681                           
  1682                           ;main.c: 132: PEIE = 1;
  1683  02E7  170B               	bsf	11,6	;volatile
  1684                           
  1685                           ;main.c: 133: GIE = 1;
  1686  02E8  178B               	bsf	11,7	;volatile
  1687  02E9  0008               	return
  1688  02EA                     __end_of_setup:	
  1689                           
  1690                           	psect	intentry
  1691  0004                     __pintentry:	
  1692 ;; *************** function _ISR *****************
  1693 ;; Defined at:
  1694 ;;		line 55 in file "main.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;		None               void
  1701 ;; Registers used:
  1702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1710 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1711 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1712 ;;Total ram usage:        3 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    1
  1715 ;; This function calls:
  1716 ;;		_getch
  1717 ;; This function is called by:
  1718 ;;		Interrupt level 1
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722  0004                     _ISR:	
  1723                           
  1724                           ;incstack = 0
  1725                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1726  0004  3180               	pagesel	$
  1727  0005  0020               	movlb	0	; select bank0
  1728  0006  087F               	movf	127,w
  1729  0007  00F2               	movwf	??_ISR+2
  1730                           
  1731                           ;main.c: 56: if (ADIF)
  1732  0008  1F11               	btfss	17,6	;volatile
  1733  0009  2825               	goto	i1l1093
  1734                           
  1735                           ;main.c: 57: {
  1736                           ;main.c: 58: ADON = 0;
  1737  000A  0021               	movlb	1	; select bank1
  1738  000B  101D               	bcf	29,0	;volatile
  1739                           
  1740                           ;main.c: 60: if (ADRES < CUTOFF_VOLTAGE)
  1741  000C  30F7               	movlw	low (_CUTOFF_VOLTAGE| (0+32768))
  1742  000D  0084               	movwf	4
  1743  000E  3082               	movlw	high (_CUTOFF_VOLTAGE| (0+32768))
  1744  000F  0085               	movwf	5
  1745  0010  3F00               	moviw [0]fsr0
  1746  0011  00F0               	movwf	??_ISR
  1747  0012  3F01               	moviw [1]fsr0
  1748  0013  00F1               	movwf	??_ISR+1
  1749  0014  0871               	movf	??_ISR+1,w
  1750  0015  021C               	subwf	28,w	;volatile
  1751  0016  1D03               	skipz
  1752  0017  281A               	goto	u87_25
  1753  0018  0870               	movf	??_ISR,w
  1754  0019  021B               	subwf	27,w	;volatile
  1755  001A                     u87_25:	
  1756  001A  1803               	skipnc
  1757  001B  2820               	goto	i1l1087
  1758                           
  1759                           ;main.c: 61: {
  1760                           ;main.c: 62: batteryLow = 1;
  1761  001C  0020               	movlb	0	; select bank0
  1762  001D  01BC               	clrf	_batteryLow
  1763  001E  0ABC               	incf	_batteryLow,f
  1764                           
  1765                           ;main.c: 63: }
  1766  001F  2822               	goto	i1l1089
  1767  0020                     i1l1087:	
  1768                           
  1769                           ;main.c: 64: else
  1770                           ;main.c: 65: {
  1771                           ;main.c: 66: batteryLow = 0;
  1772  0020  0020               	movlb	0	; select bank0
  1773  0021  01BC               	clrf	_batteryLow
  1774  0022                     i1l1089:	
  1775                           
  1776                           ;main.c: 67: }
  1777                           ;main.c: 68: checkBattery = 1;
  1778  0022  01C1               	clrf	_checkBattery
  1779  0023  0AC1               	incf	_checkBattery,f
  1780                           
  1781                           ;main.c: 69: ADIF = 0;
  1782  0024  1311               	bcf	17,6	;volatile
  1783  0025                     i1l1093:	
  1784                           
  1785                           ;main.c: 70: }
  1786                           ;main.c: 71: if (RCIF)
  1787  0025  1E91               	btfss	17,5	;volatile
  1788  0026  2849               	goto	i1l90
  1789                           
  1790                           ;main.c: 72: {
  1791                           ;main.c: 73: rxchar = getch();
  1792  0027  3182  22F0  3180   	fcall	_getch
  1793  002A  00F0               	movwf	??_ISR
  1794  002B  0870               	movf	??_ISR,w
  1795  002C  00F9               	movwf	_rxchar
  1796                           
  1797                           ;main.c: 74: if (packetCorrupt)
  1798  002D  0020               	movlb	0	; select bank0
  1799  002E  083E               	movf	_packetCorrupt,w
  1800  002F  1903               	btfsc	3,2
  1801  0030  2836               	goto	i1l1103
  1802                           
  1803                           ;main.c: 75: {
  1804                           ;main.c: 77: if (rxchar == 0x02)
  1805  0031  0879               	movf	_rxchar,w
  1806  0032  3A02               	xorlw	2
  1807  0033  1D03               	skipz
  1808  0034  2849               	goto	i1l90
  1809                           
  1810                           ;main.c: 78: {
  1811                           ;main.c: 80: packetCorrupt = 0;
  1812  0035  01BE               	clrf	_packetCorrupt
  1813  0036                     i1l1103:	
  1814                           ;main.c: 82: else
  1815                           ;main.c: 83: {
  1816                           ;main.c: 84: return;
  1817                           
  1818                           ;main.c: 81: }
  1819                           
  1820                           
  1821                           ;main.c: 85: }
  1822                           ;main.c: 86: }
  1823                           ;main.c: 87: packetBuffer[i] = rxchar;
  1824  0036  0879               	movf	_rxchar,w
  1825  0037  00F0               	movwf	??_ISR
  1826  0038  0878               	movf	_i,w
  1827  0039  3E36               	addlw	_packetBuffer& (0+255)
  1828  003A  0086               	movwf	6
  1829  003B  0187               	clrf	7
  1830  003C  0870               	movf	??_ISR,w
  1831  003D  0081               	movwf	1
  1832                           
  1833                           ;main.c: 88: i++;
  1834  003E  3001               	movlw	1
  1835  003F  00F0               	movwf	??_ISR
  1836  0040  0870               	movf	??_ISR,w
  1837  0041  07F8               	addwf	_i,f
  1838                           
  1839                           ;main.c: 89: if (i >= 6)
  1840  0042  3006               	movlw	6
  1841  0043  0278               	subwf	_i,w
  1842  0044  1C03               	skipc
  1843  0045  2849               	goto	i1l90
  1844                           
  1845                           ;main.c: 90: {
  1846                           ;main.c: 91: packetReceived = 1;
  1847  0046  01BF               	clrf	_packetReceived
  1848  0047  0ABF               	incf	_packetReceived,f
  1849                           
  1850                           ;main.c: 92: i = 0;
  1851  0048  01F8               	clrf	_i
  1852  0049                     i1l90:	
  1853  0049  0872               	movf	??_ISR+2,w
  1854  004A  00FF               	movwf	127
  1855  004B  0009               	retfie
  1856  004C                     __end_of_ISR:	
  1857                           
  1858                           	psect	text5
  1859  02F0                     __ptext5:	
  1860 ;; *************** function _getch *****************
  1861 ;; Defined at:
  1862 ;;		line 15 in file "usart.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      unsigned char 
  1869 ;; Registers used:
  1870 ;;		wreg
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; This function calls:
  1883 ;;		Nothing
  1884 ;; This function is called by:
  1885 ;;		_ISR
  1886 ;;		_getche
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           
  1891                           ;psect for function _getch
  1892  02F0                     _getch:	
  1893  02F0                     i1l170:	
  1894                           ;usart.c: 18: continue;
  1895                           
  1896                           ;usart.c: 17: while(!RCIF)
  1897                           
  1898                           ;incstack = 0
  1899                           ; Regs used in _getch: [wreg]
  1900                           
  1901  02F0  0020               	movlb	0	; select bank0
  1902  02F1  1E91               	btfss	17,5	;volatile
  1903  02F2  2AF0               	goto	i1l170
  1904                           
  1905                           ;usart.c: 19: return RCREG;
  1906  02F3  0023               	movlb	3	; select bank3
  1907  02F4  0819               	movf	25,w	;volatile
  1908  02F5  0008               	return
  1909  02F6                     __end_of_getch:	
  1910  007E                     btemp	set	126	;btemp
  1911  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    3
    Data        3
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80     22      36
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?___awdiv	int  size(1) Largest target is 0


Critical Paths under _main in COMMON

    _main->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0    1143
                                              4 BANK0     18    18      0
                              _setup
                _checkBatteryVoltage
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     300
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _checkBatteryVoltage                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                              _getch
 ---------------------------------------------------------------------------------
 (3) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _checkBatteryVoltage
   ___awdiv

 _ISR (ROOT)
   _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       5       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      24       5       45.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      2E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      33      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Jan 10 02:46:31 2014

              _CUTOFF_VOLTAGE 02F7                             _i 0078                   __CFG_CP$OFF 0000  
                ___awdiv@sign 0021                           l110 00CA                           l105 0228  
                         l140 0219                           l116 00FF                           l125 013F  
                         l142 0224                           l126 0166                           l911 007B  
                         l915 0083                           l941 00E8                           l933 00BE  
                         l919 008B                           l953 0119                           l945 00F3  
                         l937 00CC                           l929 00B3                           l971 0178  
                         l955 0120                           l981 01A5                           l949 0101  
                         l983 01AA                           l967 0162                           l959 0138  
                         l995 01DC                           _GIE 005F                           l989 01C5  
                         l999 01ED                           _ISR 0004                           u605 0129  
                         u615 0150                           u715 0233                           u645 0188  
                         u815 0295                           u735 0247                           u655 0196  
                         u825 029F                           u665 01B5                           u835 02A7  
                         u755 0264                           u675 01D5                           u595 010A  
                         u685 01E6                           u795 028B         ??_checkBatteryVoltage 0073  
                __CFG_BORV$LO 0000                           wreg 0009                  __CFG_LVP$OFF 0000  
                        ?_ISR 0070                          l1011 022C                          l1005 021C  
                        l1023 024C                          l1015 0238                          l1009 022A  
                        l1043 0275                          l1027 0253                          l1019 023F  
                        l1061 0294                          l1071 02AF                          l1049 0280  
                        l1075 02B7                          l1067 02A6                          l1059 0288  
                        _ADIE 048E                          _ADIF 008E                          _ADGO 04E9  
                        _ADON 04E8                          _LATA 010C                          _LATC 010E  
                        _PEIE 005E                          _RCIE 048D                          _RCIF 008D  
                        i1l90 0049                          _TXIF 008C                  __CFG_WRT$OFF 0000  
                        _main 0069                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E                 __CFG_BOREN$ON 0000                          start 004C  
               __CFG_IESO$OFF 0000        __end_of_CUTOFF_VOLTAGE 02F9           __CFG_PLLEN$DISABLED 0000  
               __CFG_MCLRE$ON 0000                         ??_ISR 0070                         ?_main 0070  
             __end_of___awdiv 02BE                         _ADRES 009B                 __CFG_WDTE$OFF 0000  
             ___awdiv@divisor 0073                         i1l170 02F0               ___awdiv@counter 0020  
                       _RCREG 0199                         _RCSTA 019D                         _SPBRG 019B  
                       u87_25 001A                         _TXREG 019A                         _TXSTA 019E  
               __CFG_PWRTE$ON 0000                __CFG_FCMEN$OFF 0000                         _getch 02F0  
                       _setup 02BE                         main@x 0032                         main@y 0034  
                main@pwmCount 002C                         status 0003                         wtemp0 007E  
             __initialization 004E                  __end_of_main 026A                __CFG_LPBOR$OFF 0000  
                      ??_main 0024           __CFG_USBLSCLK$48MHz 0000                        ?_getch 0070  
            ___awdiv@dividend 0075                        ?_setup 0070                        _ANSELA 018C  
                      _ANSELC 018E                 _packetCorrupt 003E                        i1l1103 0036  
                      i1l1093 0025                        i1l1087 0020                        i1l1089 0022  
                      _TRISC4 0474                        _TRISC5 0475                     ??___awdiv 0077  
              __CFG_STVREN$ON 0000              ___awdiv@quotient 0022                        _rxchar 0079  
                _checkBattery 0041       __end_of__initialization 0066                __pcstackCOMMON 0070  
                __pidataBANK0 02FA                 __end_of_getch 02F6                 __end_of_setup 02EA  
                     ??_getch 0070                       ??_setup 0073                    __pbssBANK0 0036  
                  _batteryLow 003C                    __pmaintext 0069               __CFG_PLLMULT$3x 0000  
                  __pintentry 0004   __end_of_checkBatteryVoltage 02F0                _packetReceived 003F  
                  __stringtab 02F6                       ___awdiv 026A                       __ptext1 026A  
                     __ptext2 02EA                       __ptext3 02BE                       __ptext5 02F0  
                     _leftPWM 003D                       _leftDir 0042                  __size_of_ISR 0048  
        end_of_initialization 0066              __CFG_FOSC$INTOSC 0000                     _TRISAbits 008C  
                   _TRISCbits 008E           start_initialization 004E                   __end_of_ISR 004C  
                _packetBuffer 0036                   __pdataBANK0 0041                   __pbssCOMMON 0078  
               __pcstackBANK0 0020              main@rightPWMtemp 002A                      ?___awdiv 0073  
                   __pstrings 02F6               main@leftPWMtemp 0028  __size_of_checkBatteryVoltage 0006  
              __size_of_getch 0006                __size_of_setup 002C                      _LATAbits 010C  
                    _LATCbits 010E              _SPEED_INCREMENTS 02F9                    _ADCON0bits 009D  
                  _ADCON1bits 009E              __size_of___awdiv 0054            __end_of__stringtab 02F7  
                  _ANSELAbits 018C                 __size_of_main 0201                      _rightPWM 0040  
                    _rightDir 0043                      main@xAbs 002E                      main@yAbs 0030  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                    _OSCCONbits 0099  
         _checkBatteryVoltage 02EA           __CFG_CPUDIV$CLKDIV2 0000      __end_of_SPEED_INCREMENTS 02FA  
        ?_checkBatteryVoltage 0070  
